{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = validatePathConfig;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar formatToList = function formatToList(items) {\n  return items.map(function (key) {\n    return \"- \" + key;\n  }).join('\\n');\n};\n\nfunction validatePathConfig(config) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  var invalidKeys = Object.keys(config).filter(function (key) {\n    return !validKeys.includes(key);\n  });\n\n  if (invalidKeys.length) {\n    throw new Error(\"Found invalid properties in the configuration:\\n\" + formatToList(invalidKeys) + \"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\" + formatToList(validKeys) + \"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(function (_ref) {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n          _ = _ref2[0],\n          value = _ref2[1];\n\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA,IAAMA,YAAY,GAAIC,SAAhBD,YAAgBC,MAAD;EAAA,OACnBA,KAAK,CAACC,GAAND,CAAWE,aAAD;IAAA,cAAcA,GAAd;EAAA,CAAVF,EAA+BG,IAA/BH,CAAoC,IAApCA,CADmB;AAAA,CAArB;;AAGe,SAASI,kBAAT,CAA4BC,MAA5B,EAAsD;EAAA,IAAbC,IAAa,uEAAN,IAAM;EACnE,IAAMC,SAAS,GAAG,CAAC,kBAAD,EAAqB,SAArB,CAAlB;;EAEA,IAAI,CAACD,IAAL,EAAW;IACTC,SAAS,CAACC,IAAVD,CAAe,MAAfA,EAAuB,OAAvBA,EAAgC,WAAhCA,EAA6C,OAA7CA;EACD;;EAED,IAAME,WAAW,GAAGC,MAAM,CAACC,IAAPD,CAAYL,MAAZK,EAAoBE,MAApBF,CACjBR,aAAD;IAAA,OAAS,CAACK,SAAS,CAACM,QAAVN,CAAmBL,GAAnBK,CAAV;EAAA,CADkBG,CAApB;;EAIA,IAAID,WAAW,CAACK,MAAhB,EAAwB;IACtB,MAAM,IAAIC,KAAJ,sDAC+ChB,YAAY,CAC7DU,WAD6D,CAD3D,0HAGkHV,YAAY,CAChIQ,SADgI,CAH9H,4HAAN;EAOD;;EAED,IAAIF,MAAM,CAACW,OAAX,EAAoB;IAClBN,MAAM,CAACO,OAAPP,CAAeL,MAAM,CAACW,OAAtBN,EAA+BQ,OAA/BR,CAAuC,gBAAgB;MAAA;MAAA,IAAdS,CAAc;MAAA,IAAXC,KAAW;;MACrD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7BhB,kBAAkB,CAACgB,KAAD,EAAQ,KAAR,CAAlBhB;MACD;IAHH;EAKD;AACF","names":["formatToList","items","map","key","join","validatePathConfig","config","root","validKeys","push","invalidKeys","Object","keys","filter","includes","length","Error","screens","entries","forEach","_","value"],"sources":["validatePathConfig.tsx"],"sourcesContent":["const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}