{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _constants = require(\"./constants\");\n\nvar _DraggingGestureHandler = _interopRequireDefault(require(\"./DraggingGestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nvar _State = require(\"../State\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar PanGestureHandler = function (_DraggingGestureHandl) {\n  (0, _inherits2.default)(PanGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(PanGestureHandler);\n\n  function PanGestureHandler() {\n    (0, _classCallCheck2.default)(this, PanGestureHandler);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(PanGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'pan';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return _hammerjs.default.Pan;\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return Object.assign({}, (0, _get2.default)((0, _getPrototypeOf2.default)(PanGestureHandler.prototype), \"getHammerConfig\", this).call(this), {\n        direction: this.getDirection()\n      });\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var nextState = (0, _get2.default)((0, _getPrototypeOf2.default)(PanGestureHandler.prototype), \"getState\", this).call(this, type);\n\n      if (this.previousState === _State.State.UNDETERMINED && nextState === _State.State.ACTIVE) {\n        return _State.State.BEGAN;\n      }\n\n      return nextState;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var config = this.getConfig();\n      var activeOffsetXStart = config.activeOffsetXStart,\n          activeOffsetXEnd = config.activeOffsetXEnd,\n          activeOffsetYStart = config.activeOffsetYStart,\n          activeOffsetYEnd = config.activeOffsetYEnd,\n          minDist = config.minDist;\n      var directions = [];\n      var horizontalDirections = [];\n\n      if (!(0, _utils.isnan)(minDist)) {\n        return _hammerjs.default.DIRECTION_ALL;\n      }\n\n      if (!(0, _utils.isnan)(activeOffsetXStart)) horizontalDirections.push(_hammerjs.default.DIRECTION_LEFT);\n      if (!(0, _utils.isnan)(activeOffsetXEnd)) horizontalDirections.push(_hammerjs.default.DIRECTION_RIGHT);\n      if (horizontalDirections.length === 2) horizontalDirections = [_hammerjs.default.DIRECTION_HORIZONTAL];\n      directions = directions.concat(horizontalDirections);\n      var verticalDirections = [];\n      if (!(0, _utils.isnan)(activeOffsetYStart)) verticalDirections.push(_hammerjs.default.DIRECTION_UP);\n      if (!(0, _utils.isnan)(activeOffsetYEnd)) verticalDirections.push(_hammerjs.default.DIRECTION_DOWN);\n      if (verticalDirections.length === 2) verticalDirections = [_hammerjs.default.DIRECTION_VERTICAL];\n      directions = directions.concat(verticalDirections);\n\n      if (!directions.length) {\n        return _hammerjs.default.DIRECTION_NONE;\n      }\n\n      if (directions[0] === _hammerjs.default.DIRECTION_HORIZONTAL && directions[1] === _hammerjs.default.DIRECTION_VERTICAL) {\n        return _hammerjs.default.DIRECTION_ALL;\n      }\n\n      if (horizontalDirections.length && verticalDirections.length) {\n        return _hammerjs.default.DIRECTION_ALL;\n      }\n\n      return directions[0];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        return {\n          minDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, criteria) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      return !(0, _utils.isnan)(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !(0, _utils.isnan)(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !(0, _utils.isnan)(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !(0, _utils.isnan)(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n    }\n  }, {\n    key: \"shouldActivateUnderCustomCriteria\",\n    value: function shouldActivateUnderCustomCriteria(_ref2, criteria) {\n      var deltaX = _ref2.deltaX,\n          deltaY = _ref2.deltaY,\n          velocity = _ref2.velocity;\n      return !(0, _utils.isnan)(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !(0, _utils.isnan)(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !(0, _utils.isnan)(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !(0, _utils.isnan)(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n        x: deltaX,\n        y: deltaY\n      }), criteria.minDistSq) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.x, criteria.minVelocityX) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.y, criteria.minVelocityY) || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)(velocity), criteria.minVelocitySq);\n    }\n  }, {\n    key: \"shouldMultiFingerPanFail\",\n    value: function shouldMultiFingerPanFail(_ref3) {\n      var pointerLength = _ref3.pointerLength,\n          scale = _ref3.scale,\n          deltaRotation = _ref3.deltaRotation;\n\n      if (pointerLength <= 1) {\n        return false;\n      }\n\n      var deltaScale = Math.abs(scale - 1);\n      var absDeltaRotation = Math.abs(deltaRotation);\n\n      if (deltaScale > _constants.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n        return true;\n      }\n\n      if (absDeltaRotation > _constants.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(criteria) {\n      return (0, _utils.isValidNumber)(criteria.minDistSq) || (0, _utils.isValidNumber)(criteria.minVelocityX) || (0, _utils.isValidNumber)(criteria.minVelocityY) || (0, _utils.isValidNumber)(criteria.minVelocitySq) || (0, _utils.isValidNumber)(criteria.activeOffsetXStart) || (0, _utils.isValidNumber)(criteria.activeOffsetXEnd) || (0, _utils.isValidNumber)(criteria.activeOffsetYStart) || (0, _utils.isValidNumber)(criteria.activeOffsetYEnd);\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(props, _recognizer, inputData) {\n      if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n        return {\n          failed: true\n        };\n      }\n\n      var velocity = {\n        x: inputData.velocityX,\n        y: inputData.velocityY\n      };\n\n      if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n        deltaX: inputData.deltaX,\n        deltaY: inputData.deltaY,\n        velocity: velocity\n      }, props)) {\n        if (this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation\n        })) {\n          return {\n            failed: true\n          };\n        }\n\n        return {\n          success: true\n        };\n      }\n\n      return {\n        success: false\n      };\n    }\n  }]);\n  return PanGestureHandler;\n}(_DraggingGestureHandler.default);\n\nvar _default = PanGestureHandler;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["PanGestureHandler","Hammer","Pan","getHammerConfig","direction","getDirection","getState","type","nextState","previousState","State","UNDETERMINED","ACTIVE","BEGAN","config","getConfig","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","minDist","directions","horizontalDirections","isnan","DIRECTION_ALL","push","DIRECTION_LEFT","DIRECTION_RIGHT","length","DIRECTION_HORIZONTAL","concat","verticalDirections","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_NONE","hasCustomActivationCriteria","minDistSq","shouldFailUnderCustomCriteria","criteria","deltaX","deltaY","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","shouldActivateUnderCustomCriteria","velocity","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","x","y","minVelocityX","minVelocityY","minVelocitySq","shouldMultiFingerPanFail","pointerLength","scale","deltaRotation","deltaScale","Math","abs","absDeltaRotation","MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD","MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD","updateHasCustomActivationCriteria","isValidNumber","isGestureEnabledForEvent","props","_recognizer","inputData","failed","velocityX","velocityY","maxPointers","success","DraggingGestureHandler"],"sources":["PanGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport {\n  EventMap,\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\n\nimport { Config, HammerInputExt } from './GestureHandler';\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getState(type: keyof typeof EventMap) {\n    const nextState = super.getState(type);\n    // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n    if (\n      this.previousState === State.UNDETERMINED &&\n      nextState === State.ACTIVE\n    ) {\n      return State.BEGAN;\n    }\n    return nextState;\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions: number[] = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart))\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    if (!isnan(activeOffsetXEnd))\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    if (horizontalDirections.length === 2)\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart))\n      verticalDirections.push(Hammer.DIRECTION_UP);\n    if (!isnan(activeOffsetYEnd))\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\n\n    if (verticalDirections.length === 2)\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { deltaX, deltaY }: HammerInputExt,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.failOffsetXStart) &&\n        deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) &&\n        deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria(\n    { deltaX, deltaY, velocity }: any,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) &&\n        deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) &&\n        deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) &&\n        deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) &&\n        deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(\n        VEC_LEN_SQ({ x: deltaX, y: deltaY }),\n        criteria.minDistSq\n      ) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({\n    pointerLength,\n    scale,\n    deltaRotation,\n  }: {\n    deltaRotation: number;\n    pointerLength: number;\n    scale: number;\n  }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(\n    criteria: Config & { minVelocityX?: number; minVelocityY?: number }\n  ) {\n    return (\n      isValidNumber(criteria.minDistSq) ||\n      isValidNumber(criteria.minVelocityX) ||\n      isValidNumber(criteria.minVelocityY) ||\n      isValidNumber(criteria.minVelocitySq) ||\n      isValidNumber(criteria.activeOffsetXStart) ||\n      isValidNumber(criteria.activeOffsetXEnd) ||\n      isValidNumber(criteria.activeOffsetYStart) ||\n      isValidNumber(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(\n    props: any,\n    _recognizer: any,\n    inputData: HammerInputExt & { deltaRotation: number }\n  ) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this.hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nexport default PanGestureHandler;\n"]},"metadata":{},"sourceType":"script"}