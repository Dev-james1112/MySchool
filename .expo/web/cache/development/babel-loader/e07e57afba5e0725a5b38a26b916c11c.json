{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deprecate;\n\nvar _compareVersions = _interopRequireDefault(require(\"compare-versions\"));\n\nvar _CodedError = require(\"./errors/CodedError\");\n\nvar postedWarnings = {};\n\nfunction deprecate(library, deprecatedAPI) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var currentVersion = options.currentVersion,\n      versionToRemove = options.versionToRemove,\n      replacement = options.replacement;\n  var code = codeFromLibrary(library);\n  var key = code + \":\" + deprecatedAPI + \":\" + replacement;\n\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (!currentVersion || !versionToRemove || (0, _compareVersions.default)(currentVersion, versionToRemove) >= 0) {\n    var _message = \"`\" + deprecatedAPI + \"` has been removed\";\n\n    if (versionToRemove) {\n      _message = _message + \" as of version \\\"\" + versionToRemove + \"\\\"\";\n    }\n\n    if (replacement && replacement.length) {\n      _message = _message + \" please migrate to: `\" + replacement + \"`\";\n    }\n\n    throw new _CodedError.CodedError(\"ERR_DEPRECATED_API\", prependLibrary(library, _message));\n  }\n\n  var message = \"`\" + deprecatedAPI + \"` has been deprecated\";\n\n  if (replacement && replacement.length) {\n    message = message + \" in favor of `\" + replacement + \"`\";\n  }\n\n  if (versionToRemove && versionToRemove.length) {\n    message = message + \" and will be removed in version \\\"\" + versionToRemove + \"\\\"\";\n  }\n\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library, message) {\n  return library + \": \" + message;\n}\n\nfunction codeFromLibrary(library) {\n  var code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AAEA,IAAMA,cAAc,GAA+B,EAAnD;;AAKc,SAAUC,SAAV,CACZC,OADY,EAEZC,aAFY,EAON;EAAA,IAJNC,OAIM,uEAAF,EAAE;EAEN,IAAQC,cAAR,GAAyDD,OAAzD,CAAQC,cAAR;EAAA,IAAwBC,eAAxB,GAAyDF,OAAzD,CAAwBE,eAAxB;EAAA,IAAyCC,WAAzC,GAAyDH,OAAzD,CAAyCG,WAAzC;EACA,IAAMC,IAAI,GAAGC,eAAe,CAACP,OAAD,CAA5B;EACA,IAAMQ,GAAG,GAAMF,IAAN,SAAcL,aAAd,SAA+BI,WAAxC;;EACA,IAAI,CAACP,cAAc,CAACU,GAAD,CAAnB,EAA0B;IACxBV,cAAc,CAACU,GAAD,CAAd,GAAsB,IAAtB;EACD;;EAED,IACE,CAACL,cAAD,IACA,CAACC,eADD,IAEA,8BAAgBD,cAAhB,EAAgCC,eAAhC,KAAoD,CAHtD,EAIE;IACA,IAAIK,QAAO,SAAQR,aAAR,uBAAX;;IACA,IAAIG,eAAJ,EAAqB;MACnBK,QAAO,GAAMA,QAAN,yBAAgCL,eAAhC,OAAP;IACD;;IACD,IAAIC,WAAW,IAAIA,WAAW,CAACK,MAA/B,EAAuC;MACrCD,QAAO,GAAMA,QAAN,6BAAsCJ,WAAtC,MAAP;IACD;;IAED,MAAM,IAAIM,sBAAJ,uBAAqCC,cAAc,CAACZ,OAAD,EAAUS,QAAV,CAAnD,CAAN;EACD;;EAED,IAAIA,OAAO,SAAQR,aAAR,0BAAX;;EACA,IAAII,WAAW,IAAIA,WAAW,CAACK,MAA/B,EAAuC;IACrCD,OAAO,GAAMA,OAAN,sBAA+BJ,WAA/B,MAAP;EACD;;EACD,IAAID,eAAe,IAAIA,eAAe,CAACM,MAAvC,EAA+C;IAC7CD,OAAO,GAAMA,OAAN,0CAAiDL,eAAjD,OAAP;EACD;;EACDS,OAAO,CAACC,IAAR,CAAaF,cAAc,CAACZ,OAAD,EAAUS,OAAV,CAA3B;AACD;;AAED,SAASG,cAAT,CAAwBZ,OAAxB,EAAyCS,OAAzC,EAAwD;EACtD,OAAUT,OAAV,UAAsBS,OAAtB;AACD;;AAOD,SAASF,eAAT,CAAyBP,OAAzB,EAAwC;EACtC,IAAMM,IAAI,GAAGN,OAAO,CAACe,OAAR,CAAgB,OAAhB,EAAyB,GAAzB,EAA8BC,WAA9B,EAAb;EACA,OAAOV,IAAP;AACD","names":["postedWarnings","deprecate","library","deprecatedAPI","options","currentVersion","versionToRemove","replacement","code","codeFromLibrary","key","message","length","CodedError","prependLibrary","console","warn","replace","toUpperCase"],"sourceRoot":"","sources":["../src/deprecate.ts"],"sourcesContent":["import compareVersions from 'compare-versions';\n\nimport { CodedError } from './errors/CodedError';\n\nconst postedWarnings: { [key: string]: boolean } = {};\n\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(\n  library: string,\n  deprecatedAPI: string,\n  options: {\n    replacement?: string;\n    currentVersion?: string;\n    versionToRemove?: string;\n  } = {}\n): void {\n  const { currentVersion, versionToRemove, replacement } = options;\n  const code = codeFromLibrary(library);\n  const key = `${code}:${deprecatedAPI}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (\n    !currentVersion ||\n    !versionToRemove ||\n    compareVersions(currentVersion, versionToRemove) >= 0\n  ) {\n    let message = `\\`${deprecatedAPI}\\` has been removed`;\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n  }\n\n  let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library: string, message: string): string {\n  return `${library}: ${message}`;\n}\n\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library: string): string {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}\n"]},"metadata":{},"sourceType":"script"}