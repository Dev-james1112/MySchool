{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _ErroRecoveryStore = require(\"./ErroRecoveryStore\");\n\nvar _ExpoErrorRecovery = _interopRequireDefault(require(\"./ExpoErrorRecovery\"));\n\nif (_expoModulesCore.Platform.OS !== 'web') {\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* (error, isFatal) {\n      if (_ExpoErrorRecovery.default.saveRecoveryProps) {\n        yield _ExpoErrorRecovery.default.saveRecoveryProps((0, _ErroRecoveryStore.getRecoveryPropsToSave)());\n      }\n\n      globalHandler(error, isFatal);\n    });\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} else if (_expoModulesCore.Platform.OS === 'web' && _expoModulesCore.Platform.isDOMAvailable) {\n  window.addEventListener('error', function () {\n    _ExpoErrorRecovery.default.saveRecoveryProps((0, _ErroRecoveryStore.getRecoveryPropsToSave)());\n  });\n}","map":{"version":3,"mappings":";;;;AAAA;;AAEA;;AACA;;AAEA,IAAIA,0BAASC,EAAT,KAAgB,KAApB,EAA2B;EACzB,IAAMC,aAAa,GAAGC,UAAU,CAACC,gBAAX,EAAtB;EAGAD,UAAU,CAACE,gBAAX;IAAA,2CAA4B,WAAOC,KAAP,EAAcC,OAAd,EAAyB;MACnD,IAAIC,2BAAkBC,iBAAtB,EAAyC;QACvC,MAAMD,2BAAkBC,iBAAlB,CAAoC,gDAApC,CAAN;MACD;;MACDP,aAAa,CAACI,KAAD,EAAQC,OAAR,CAAb;IACD,CALD;;IAAA;MAAA;IAAA;EAAA;AAMD,CAVD,MAUO,IAAIP,0BAASC,EAAT,KAAgB,KAAhB,IAAyBD,0BAASU,cAAtC,EAAsD;EAC3DC,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,YAAK;IACpCJ,2BAAkBC,iBAAlB,CAAoC,gDAApC;EACD,CAFD;AAGD","names":["Platform","OS","globalHandler","ErrorUtils","getGlobalHandler","setGlobalHandler","error","isFatal","ExpoErrorRecovery","saveRecoveryProps","isDOMAvailable","window","addEventListener"],"sourceRoot":"","sources":["../src/ErrorRecovery.fx.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"]},"metadata":{},"sourceType":"script"}