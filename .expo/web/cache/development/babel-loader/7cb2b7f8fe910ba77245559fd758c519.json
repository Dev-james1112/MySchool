{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.TOUCHABLE_STATE = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _State = require(\"../../State\");\n\nvar _GestureButtons = require(\"../GestureButtons\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2\n};\nexports.TOUCHABLE_STATE = TOUCHABLE_STATE;\n\nvar GenericTouchable = function (_Component) {\n  (0, _inherits2.default)(GenericTouchable, _Component);\n\n  var _super = _createSuper(GenericTouchable);\n\n  function GenericTouchable() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, GenericTouchable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pressInTimeout\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pressOutTimeout\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"longPressTimeout\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"longPressDetected\", false);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pointerInside\", true);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"STATE\", TOUCHABLE_STATE.UNDETERMINED);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureEvent\", function (_ref) {\n      var pointerInside = _ref.nativeEvent.pointerInside;\n\n      if (_this.pointerInside !== pointerInside) {\n        if (pointerInside) {\n          _this.onMoveIn();\n        } else {\n          _this.onMoveOut();\n        }\n      }\n\n      _this.pointerInside = pointerInside;\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var state = nativeEvent.state;\n\n      if (state === _State.State.CANCELLED || state === _State.State.FAILED) {\n        _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      } else if (state === (_reactNative.Platform.OS !== 'android' ? _State.State.ACTIVE : _State.State.BEGAN) && _this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        _this.handlePressIn();\n      } else if (state === _State.State.END) {\n        var shouldCallOnPress = !_this.longPressDetected && _this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && _this.pressOutTimeout === null;\n\n        _this.handleGoToUndetermined();\n\n        if (shouldCallOnPress) {\n          var _this$props$onPress, _this$props;\n\n          (_this$props$onPress = (_this$props = _this.props).onPress) === null || _this$props$onPress === void 0 ? void 0 : _this$props$onPress.call(_this$props);\n        }\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onLongPressDetected\", function () {\n      var _this$props$onLongPre, _this$props2;\n\n      _this.longPressDetected = true;\n      (_this$props$onLongPre = (_this$props2 = _this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props2);\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(GenericTouchable, [{\n    key: \"handlePressIn\",\n    value: function handlePressIn() {\n      var _this2 = this;\n\n      if (this.props.delayPressIn) {\n        this.pressInTimeout = setTimeout(function () {\n          _this2.moveToState(TOUCHABLE_STATE.BEGAN);\n\n          _this2.pressInTimeout = null;\n        }, this.props.delayPressIn);\n      } else {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n\n      if (this.props.onLongPress) {\n        var time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n        this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n      }\n    }\n  }, {\n    key: \"handleMoveOutside\",\n    value: function handleMoveOutside() {\n      var _this3 = this;\n\n      if (this.props.delayPressOut) {\n        this.pressOutTimeout = this.pressOutTimeout || setTimeout(function () {\n          _this3.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n\n          _this3.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n      } else {\n        this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n      }\n    }\n  }, {\n    key: \"handleGoToUndetermined\",\n    value: function handleGoToUndetermined() {\n      var _this4 = this;\n\n      clearTimeout(this.pressOutTimeout);\n\n      if (this.props.delayPressOut) {\n        this.pressOutTimeout = setTimeout(function () {\n          if (_this4.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n            _this4.moveToState(TOUCHABLE_STATE.BEGAN);\n          }\n\n          _this4.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n\n          _this4.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n      } else {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.reset();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.longPressDetected = false;\n      this.pointerInside = true;\n      clearTimeout(this.pressInTimeout);\n      clearTimeout(this.pressOutTimeout);\n      clearTimeout(this.longPressTimeout);\n      this.pressOutTimeout = null;\n      this.longPressTimeout = null;\n      this.pressInTimeout = null;\n    }\n  }, {\n    key: \"moveToState\",\n    value: function moveToState(newState) {\n      var _this$props$onStateCh, _this$props6;\n\n      if (newState === this.STATE) {\n        return;\n      }\n\n      if (newState === TOUCHABLE_STATE.BEGAN) {\n        var _this$props$onPressIn, _this$props3;\n\n        (_this$props$onPressIn = (_this$props3 = this.props).onPressIn) === null || _this$props$onPressIn === void 0 ? void 0 : _this$props$onPressIn.call(_this$props3);\n      } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        var _this$props$onPressOu, _this$props4;\n\n        (_this$props$onPressOu = (_this$props4 = this.props).onPressOut) === null || _this$props$onPressOu === void 0 ? void 0 : _this$props$onPressOu.call(_this$props4);\n      } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n        this.reset();\n\n        if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n          var _this$props$onPressOu2, _this$props5;\n\n          (_this$props$onPressOu2 = (_this$props5 = this.props).onPressOut) === null || _this$props$onPressOu2 === void 0 ? void 0 : _this$props$onPressOu2.call(_this$props5);\n        }\n      }\n\n      (_this$props$onStateCh = (_this$props6 = this.props).onStateChange) === null || _this$props$onStateCh === void 0 ? void 0 : _this$props$onStateCh.call(_this$props6, this.STATE, newState);\n      this.STATE = newState;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.reset();\n    }\n  }, {\n    key: \"onMoveIn\",\n    value: function onMoveIn() {\n      if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n    }\n  }, {\n    key: \"onMoveOut\",\n    value: function onMoveOut() {\n      clearTimeout(this.longPressTimeout);\n      this.longPressTimeout = null;\n\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        this.handleMoveOutside();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$touchSoun;\n\n      var coreProps = {\n        accessible: this.props.accessible !== false,\n        accessibilityLabel: this.props.accessibilityLabel,\n        accessibilityHint: this.props.accessibilityHint,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityState: this.props.accessibilityState,\n        accessibilityActions: this.props.accessibilityActions,\n        onAccessibilityAction: this.props.onAccessibilityAction,\n        nativeID: this.props.nativeID,\n        onLayout: this.props.onLayout,\n        hitSlop: this.props.hitSlop\n      };\n      return React.createElement(_GestureButtons.BaseButton, _extends({\n        style: this.props.containerStyle,\n        onHandlerStateChange: this.props.disabled ? undefined : this.onHandlerStateChange,\n        onGestureEvent: this.onGestureEvent,\n        hitSlop: this.props.hitSlop,\n        shouldActivateOnStart: this.props.shouldActivateOnStart,\n        disallowInterruption: this.props.disallowInterruption,\n        testID: this.props.testID,\n        touchSoundDisabled: (_this$props$touchSoun = this.props.touchSoundDisabled) !== null && _this$props$touchSoun !== void 0 ? _this$props$touchSoun : false\n      }, this.props.extraButtonProps), React.createElement(_reactNative.Animated.View, _extends({}, coreProps, {\n        style: this.props.style\n      }), this.props.children));\n    }\n  }]);\n  return GenericTouchable;\n}(React.Component);\n\nexports.default = GenericTouchable;\n\n_defineProperty(GenericTouchable, \"defaultProps\", {\n  delayLongPress: 600,\n  extraButtonProps: {\n    rippleColor: 'transparent',\n    exclusive: true\n  }\n});","map":{"version":3,"mappings":"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","names":["TOUCHABLE_STATE","UNDETERMINED","BEGAN","MOVED_OUTSIDE","GenericTouchable","args","_defineProperty","pointerInside","nativeEvent","onMoveIn","onMoveOut","state","State","CANCELLED","FAILED","moveToState","Platform","OS","ACTIVE","STATE","handlePressIn","END","shouldCallOnPress","longPressDetected","pressOutTimeout","handleGoToUndetermined","props","onPress","onLongPress","delayPressIn","pressInTimeout","setTimeout","time","delayLongPress","longPressTimeout","onLongPressDetected","handleMoveOutside","delayPressOut","clearTimeout","componentDidMount","reset","newState","onPressIn","onPressOut","onStateChange","componentWillUnmount","render","coreProps","accessible","accessibilityLabel","accessibilityHint","accessibilityRole","accessibilityState","accessibilityActions","onAccessibilityAction","nativeID","onLayout","hitSlop","React","BaseButton","style","containerStyle","onHandlerStateChange","disabled","undefined","onGestureEvent","shouldActivateOnStart","disallowInterruption","testID","touchSoundDisabled","extraButtonProps","Animated","View","children","Component","rippleColor","exclusive"],"sources":["GenericTouchable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\n\nimport { State } from '../../State';\nimport { BaseButton } from '../GestureButtons';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../../handlers/gestureHandlerCommon';\nimport { NativeViewGestureHandlerPayload } from '../../handlers/NativeViewGestureHandler';\nimport { TouchableNativeFeedbackExtraProps } from './TouchableNativeFeedback.android';\n\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2,\n} as const;\n\ntype TouchableState = typeof TOUCHABLE_STATE[keyof typeof TOUCHABLE_STATE];\n\nexport interface GenericTouchableProps extends TouchableWithoutFeedbackProps {\n  // Decided to drop not used fields from RN's implementation.\n  // e.g. onBlur and onFocus as well as deprecated props. - TODO: this comment may be unuseful in this moment\n\n  // TODO: in RN these events get native event parameter, which prolly could be used in our implementation too\n  onPress?: () => void;\n  onPressIn?: () => void;\n  onPressOut?: () => void;\n  onLongPress?: () => void;\n\n  nativeID?: string;\n  shouldActivateOnStart?: boolean;\n  disallowInterruption?: boolean;\n\n  containerStyle?: StyleProp<ViewStyle>;\n}\n\ninterface InternalProps {\n  extraButtonProps: TouchableNativeFeedbackExtraProps;\n  onStateChange?: (oldState: TouchableState, newState: TouchableState) => void;\n}\n\n// TODO: maybe can be better\n// TODO: all clearTimeout have ! added, maybe they shouldn't ?\ntype Timeout = ReturnType<typeof setTimeout> | null | undefined;\n\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component<\n  GenericTouchableProps & InternalProps\n> {\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n      exclusive: true,\n    },\n  };\n\n  // timeout handlers\n  pressInTimeout: Timeout;\n  pressOutTimeout: Timeout;\n  longPressTimeout: Timeout;\n\n  // This flag is required since recognition of longPress implies not-invoking onPress\n  longPressDetected = false;\n\n  pointerInside = true;\n\n  // State of touchable\n  STATE: TouchableState = TOUCHABLE_STATE.UNDETERMINED;\n\n  // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time =\n        (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  }\n  // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout =\n        this.pressOutTimeout ||\n        setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  }\n\n  // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout!); // TODO: maybe it can be undefined\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n  // reset timeout to prevent memory leaks.\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout!);\n    clearTimeout(this.pressOutTimeout!);\n    clearTimeout(this.longPressTimeout!);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  // All states' transitions are defined here.\n  moveToState(newState: TouchableState) {\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      // First touch and moving inside\n      this.props.onPressIn?.();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // Moving outside\n      this.props.onPressOut?.();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        // ... and if it happens inside button.\n        this.props.onPressOut?.();\n      }\n    }\n    // Finally call lister (used by subclasses)\n    this.props.onStateChange?.(this.STATE, newState);\n    // ... and make transition.\n    this.STATE = newState;\n  }\n\n  onGestureEvent = ({\n    nativeEvent: { pointerInside },\n  }: GestureEvent<NativeViewGestureHandlerPayload>) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n\n  onHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      // Need to handle case with external cancellation (e.g. by ScrollView)\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (\n      // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) &&\n      this.STATE === TOUCHABLE_STATE.UNDETERMINED\n    ) {\n      // Moving inside requires\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress =\n        !this.longPressDetected &&\n        this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE &&\n        this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        // Calls only inside component whether no long press was called previously\n        this.props.onPress?.();\n      }\n    }\n  };\n\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    // checked for in the caller of `onLongPressDetected`, but better to check twice\n    this.props.onLongPress?.();\n  };\n\n  componentWillUnmount() {\n    // to prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttled with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n\n  onMoveOut() {\n    // long press should no longer be detected\n    clearTimeout(this.longPressTimeout!);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n\n  render() {\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityRole: this.props.accessibilityRole,\n      // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,\n      // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016\n      accessibilityState: this.props.accessibilityState,\n      accessibilityActions: this.props.accessibilityActions,\n      onAccessibilityAction: this.props.onAccessibilityAction,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n    };\n\n    return (\n      <BaseButton\n        style={this.props.containerStyle}\n        onHandlerStateChange={\n          // TODO: not sure if it can be undefined instead of null\n          this.props.disabled ? undefined : this.onHandlerStateChange\n        }\n        onGestureEvent={this.onGestureEvent}\n        hitSlop={this.props.hitSlop}\n        shouldActivateOnStart={this.props.shouldActivateOnStart}\n        disallowInterruption={this.props.disallowInterruption}\n        testID={this.props.testID}\n        touchSoundDisabled={this.props.touchSoundDisabled ?? false}\n        {...this.props.extraButtonProps}>\n        <Animated.View {...coreProps} style={this.props.style}>\n          {this.props.children}\n        </Animated.View>\n      </BaseButton>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}