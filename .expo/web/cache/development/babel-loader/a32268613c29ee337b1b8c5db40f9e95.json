{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _get3 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _DiscreteGestureHandler = _interopRequireDefault(require(\"./DiscreteGestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nvar _excluded = [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  (0, _inherits2.default)(TapGestureHandler, _DiscreteGestureHandl);\n\n  var _super = _createSuper(TapGestureHandler);\n\n  function TapGestureHandler() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TapGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_shouldFireEndEvent\", null);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_timer\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_multiTapTimer\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onSuccessfulTap\", function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n\n      if (ev.eventType === _hammerjs.default.INPUT_END) {\n        _this.sendEvent(Object.assign({}, ev, {\n          eventType: _hammerjs.default.INPUT_MOVE\n        }));\n      }\n\n      _this.sendEvent(Object.assign({}, ev, {\n        isFinal: true\n      }));\n\n      _this.onGestureEnded(ev);\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(TapGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return _hammerjs.default.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return (0, _utils.isnan)(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n\n      (0, _get3.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture2 = this.hammer.get(this.name);\n\n        if (_gesture2.options.enable(_gesture2, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return Object.assign({}, (0, _get3.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this), {\n        event: this.name,\n        taps: (0, _utils.isnan)(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: (0, _utils.isnan)(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n          _ref$maxDeltaX = _ref.maxDeltaX,\n          maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n          _ref$maxDeltaY = _ref.maxDeltaY,\n          maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n          _ref$numberOfTaps = _ref.numberOfTaps,\n          numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n          _ref$minDurationMs = _ref.minDurationMs,\n          minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n          _ref$maxDelayMs = _ref.maxDelayMs,\n          maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n          _ref$maxDurationMs = _ref.maxDurationMs,\n          maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n          _ref$maxDist = _ref.maxDist,\n          maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n          _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n          props = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n      return (0, _get3.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, Object.assign({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n\n      clearTimeout(this._timer);\n\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n\n      (_get2 = (0, _get3.default)((0, _getPrototypeOf2.default)(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }]);\n  return TapGestureHandler;\n}(_DiscreteGestureHandler.default);\n\nvar _default = TapGestureHandler;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["TapGestureHandler","args","_defineProperty","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","Hammer","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","Tap","isnan","config","maxDelayMs","simulateCancelEvent","inputData","isGestureRunning","cancelEvent","onGestureActivated","onSuccessfulTap","onRawEvent","hasGestureFailed","gesture","hammer","get","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","getHammerConfig","event","taps","numberOfTaps","interval","time","maxDurationMs","updateGestureConfig","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","onWaitingEnded","_gesture","DiscreteGestureHandler"],"sources":["TapGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"script"}