{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _PanGestureHandler = require(\"../handlers/PanGestureHandler\");\n\nvar _TapGestureHandler = require(\"../handlers/TapGestureHandler\");\n\nvar _State = require(\"../State\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\n\nvar DrawerLayout = function (_Component) {\n  (0, _inherits2.default)(DrawerLayout, _Component);\n\n  var _super = _createSuper(DrawerLayout);\n\n  function DrawerLayout(_props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DrawerLayout);\n    _this = _super.call(this, _props);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"openValue\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureEvent\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"accessibilityIsModalView\", React.createRef());\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pointerEventsView\", React.createRef());\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"panGestureHandler\", React.createRef());\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"drawerShown\", false);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateAnimatedEvent\", function (props, state) {\n      var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n\n      if (drawerPosition !== 'left') {\n        dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);\n        touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      var translationX = dragX;\n\n      if (drawerType === 'front') {\n        var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n\n      _this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var _this$props$onDrawerS, _this$props;\n\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          (_this$props$onDrawerS = (_this$props = _this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n        };\n      }\n\n      _this.onGestureEvent = _reactNative.Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleContainerLayout\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"emitStateChanged\", function (newState, drawerWillShow) {\n      var _this$props$onDrawerS2, _this$props2;\n\n      (_this$props$onDrawerS2 = (_this$props2 = _this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"openingHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === _State.State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === _State.State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n\n        _this.setState({\n          drawerState: DRAGGING\n        });\n\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          _reactNative.Keyboard.dismiss();\n        }\n\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onTapHandlerStateChange\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      if (_this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleRelease\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props6 = _this.props,\n          drawerWidth = _this$props6.drawerWidth,\n          drawerPosition = _this$props6.drawerPosition,\n          drawerType = _this$props6.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateShowing\", function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props7 = _this.props,\n          drawerPosition = _this$props7.drawerPosition,\n          minSwipeDistance = _this$props7.minSwipeDistance,\n          edgeWidth = _this$props7.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      (_this$panGestureHandl = _this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"animateDrawer\", function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n\n      var willShow = toValue !== 0;\n\n      _this.updateShowing(willShow);\n\n      _this.emitStateChanged(SETTLING, willShow);\n\n      _this.setState({\n        drawerState: SETTLING\n      });\n\n      if (_this.props.hideStatusBar) {\n        _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n\n      _reactNative.Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed !== null && speed !== void 0 ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n\n          _this.setState({\n            drawerOpened: willShow\n          });\n\n          if (_this.state.drawerState !== DRAGGING) {\n            _this.setState({\n              drawerState: IDLE\n            });\n          }\n\n          if (willShow) {\n            var _this$props$onDrawerO, _this$props3;\n\n            (_this$props$onDrawerO = (_this$props3 = _this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n          } else {\n            var _this$props$onDrawerC, _this$props4;\n\n            (_this$props$onDrawerC = (_this$props4 = _this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n          }\n        }\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"openDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"closeDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderOverlay\", function () {\n      (0, _invariant.default)(_this.openValue, 'should be set');\n      var overlayOpacity;\n\n      if (_this.state.drawerState !== IDLE) {\n        overlayOpacity = _this.openValue;\n      } else {\n        overlayOpacity = _this.state.drawerOpened ? 1 : 0;\n      }\n\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(_TapGestureHandler.TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange\n      }, React.createElement(_reactNative.Animated.View, {\n        pointerEvents: _this.drawerShown ? 'auto' : 'none',\n        ref: _this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      }));\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderDrawer\", function () {\n      var _this$props8 = _this.props,\n          drawerBackgroundColor = _this$props8.drawerBackgroundColor,\n          drawerWidth = _this$props8.drawerWidth,\n          drawerPosition = _this$props8.drawerPosition,\n          drawerType = _this$props8.drawerType,\n          drawerContainerStyle = _this$props8.drawerContainerStyle,\n          contentContainerStyle = _this$props8.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      (0, _invariant.default)(openValue, 'should be set');\n      var containerStyles;\n\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n\n      var drawerTranslateX = 0;\n\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n\n        if (_this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = _this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(_reactNative.Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout\n      }, React.createElement(_reactNative.Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes'\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()), React.createElement(_reactNative.Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this.accessibilityIsModalView,\n        accessibilityViewIsModal: _this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n      }, React.createElement(_reactNative.View, {\n        style: dynamicDrawerStyles\n      }, _this.props.renderNavigationView(_this.openValue))));\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"setPanGestureRef\", function (ref) {\n      var _this$props$onGesture, _this$props5;\n\n      _this.panGestureHandler.current = ref;\n      (_this$props$onGesture = (_this$props5 = _this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n    });\n\n    var _dragX = new _reactNative.Animated.Value(0);\n\n    var _touchX = new _reactNative.Animated.Value(0);\n\n    var _drawerTranslation = new _reactNative.Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false\n    };\n\n    _this.updateAnimatedEvent(_props, _this.state);\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props9 = this.props,\n          drawerPosition = _this$props9.drawerPosition,\n          drawerLockMode = _this$props9.drawerLockMode,\n          edgeWidth = _this$props9.edgeWidth,\n          minSwipeDistance = _this$props9.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(_PanGestureHandler.PanGestureHandler, {\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }]);\n  return DrawerLayout;\n}(React.Component);\n\nexports.default = DrawerLayout;\n\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  drawerContainer: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n    zIndex: 1002\n  }),\n  containerOnBack: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAQA;;AAEA;;AACA;;AAkBA;;AAIA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAG,IAAlB;AAEA,IAAMC,IAAiB,GAAG,MAA1B;AACA,IAAMC,QAAqB,GAAG,UAA9B;AACA,IAAMC,QAAqB,GAAG,UAA9B;;IA+HqBC,Y;;;;;EAgBnBC,sBAAYC,MAAZD,EAAsC;IAAA;;IAAA;IACpC,0BAAMC,MAAN;;IADoCC;;IAAAA;;IAAAA,yFAqCHC,KAAK,CAACC,SAAND,EArCG;;IAAAD,kFAsCVC,KAAK,CAACC,SAAND,EAtCU;;IAAAD,kFAuCVC,KAAK,CAACC,SAAND,EAvCU;;IAAAD,4EAwChB,KAxCgB;;IAAAA,oFA+CR,UAC5BD,KAD4B,EAE5BI,KAF4B,EAGzB;MAEH,IAAQC,cAAR,GAAoDL,KAApD,CAAQK,cAAR;MAAA,IAAwBC,WAAxB,GAAoDN,KAApD,CAAwBM,WAAxB;MAAA,IAAqCC,UAArC,GAAoDP,KAApD,CAAqCO,UAArC;MACA,IACSC,UADT,GAKIJ,KALJ,CACEK,KADF;MAAA,IAEUC,WAFV,GAKIN,KALJ,CAEEO,MAFF;MAAA,IAGEC,iBAHF,GAKIR,KALJ,CAGEQ,iBAHF;MAAA,IAIEC,cAJF,GAKIT,KALJ,CAIES,cAJF;MAOA,IAAIJ,KAAK,GAAGD,UAAZ;MACA,IAAIG,MAAM,GAAGD,WAAb;;MAEA,IAAIL,cAAc,KAAK,MAAvB,EAA+B;QAO7BI,KAAK,GAAGK,sBAASC,QAATD,CACN,IAAIA,sBAASE,KAAb,CAAmB,CAAC,CAApB,CADMF,EAENN,UAFMM,CAARL;QAIAE,MAAM,GAAGG,sBAASG,GAATH,CACP,IAAIA,sBAASE,KAAb,CAAmBH,cAAnB,CADOC,EAEPA,sBAASC,QAATD,CAAkB,IAAIA,sBAASE,KAAb,CAAmB,CAAC,CAApB,CAAlBF,EAA0CJ,WAA1CI,CAFOA,CAATH;QAIAD,WAAW,CAACQ,QAAZR,CAAqBG,cAArBH;MAfF,OAgBO;QACLA,WAAW,CAACQ,QAAZR,CAAqB,CAArBA;MA9BC;;MA0DH,IAAIS,YAAY,GAAGV,KAAnB;;MACA,IAAIF,UAAU,KAAK,OAAnB,EAA4B;QAC1B,IAAMa,cAAc,GAAGN,sBAASG,GAATH,CACrBH,MADqBG,EAErBA,sBAASC,QAATD,CAAkB,IAAIA,sBAASE,KAAb,CAAmB,CAAC,CAApB,CAAlBF,EAA0CL,KAA1CK,CAFqBA,CAAvB;;QAKA,IAAMO,6BAA6B,GAAGD,cAAc,CAACE,WAAfF,CAA2B;UAC/DG,UAAU,EAAE,CAACjB,WAAW,GAAI,CAAhB,EAAmBA,WAAnB,EAAiCA,WAAW,GAAI,CAAhD,CADmD;UAE/DkB,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;QAFkD,CAA3BJ,CAAtC;QAIAD,YAAY,GAAGL,sBAASG,GAATH,CACbL,KADaK,EAEbO,6BAFaP,CAAfK;MAID;;MAED,MAAKM,SAAL,GAAiBX,sBAASG,GAATH,CAAaK,YAAbL,EAA2BF,iBAA3BE,EAA8CQ,WAA9CR,CAA0D;QACzES,UAAU,EAAE,CAAC,CAAD,EAAIjB,WAAJ,CAD6D;QAEzEkB,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,CAF4D;QAGzEE,WAAW,EAAE;MAH4D,CAA1DZ,CAAjB;MAMA,IAAMa,cAML,GAAG;QACFC,eAAe,EAAE5B,KAAK,CAAC6B;MADrB,CANJ;;MAUA,IAAI,MAAK7B,KAAL,CAAW8B,aAAf,EAA8B;QAC5BH,cAAc,CAACI,QAAfJ,GAA2BK,YAAD,EAAQ;UAAA;;UAChC,IAAMb,YAAY,GAAGc,IAAI,CAACC,KAALD,CAAWA,IAAI,CAACE,GAALF,CAASD,EAAE,CAACI,WAAHJ,CAAeb,YAAxBc,CAAXA,CAArB;UACA,IAAMI,QAAQ,GAAGlB,YAAY,GAAG,MAAKf,KAAL,CAAWS,cAA3C;UAEA,8CAAKb,KAAL,EAAW8B,aAAX,kGAA2BO,QAA3B;QAJF;MAMD;;MAED,MAAKC,cAAL,GAAsBxB,sBAASyB,KAATzB,CACpB,CAAC;QAAEsB,WAAW,EAAE;UAAEjB,YAAY,EAAEX,UAAhB;UAA4BgC,CAAC,EAAE9B;QAA/B;MAAf,CAAD,CADoBI,EAEpBa,cAFoBb,CAAtB;IAtJoC;;IAAAb,sFA4JN,gBAAwC;MAAA,IAArCmC,WAAqC,QAArCA,WAAqC;;MACtE,MAAKK,QAAL,CAAc;QAAE5B,cAAc,EAAEuB,WAAW,CAACM,MAAZN,CAAmBO;MAArC,CAAd;IA7JoC;;IAAA1C,iFAgKX,UACzB2C,QADyB,EAEzBC,cAFyB,EAGtB;MAAA;;MACH,gDAAK7C,KAAL,EAAW8C,oBAAX,qGAAkCF,QAAlC,EAA4CC,cAA5C;IApKoC;;IAAA5C,0FAuKF,iBAE0B;MAAA,IAD5DmC,WAC4D,SAD5DA,WAC4D;;MAC5D,IAAIA,WAAW,CAACW,QAAZX,KAAyBY,aAAMC,MAAnC,EAA2C;QACzC,MAAKC,aAAL,CAAmB;UAAEd;QAAF,CAAnB;MADF,OAEO,IAAIA,WAAW,CAAChC,KAAZgC,KAAsBY,aAAMC,MAAhC,EAAwC;QAC7C,MAAKE,gBAAL,CAAsBvD,QAAtB,EAAgC,KAAhC;;QACA,MAAK6C,QAAL,CAAc;UAAEW,WAAW,EAAExD;QAAf,CAAd;;QACA,IAAI,MAAKI,KAAL,CAAWqD,mBAAX,KAAmC,SAAvC,EAAkD;UAChDC,sBAASC,OAATD;QACD;;QACD,IAAI,MAAKtD,KAAL,CAAWwD,aAAf,EAA8B;UAC5BC,uBAAUC,SAAVD,CAAoB,IAApBA,EAA0B,MAAKzD,KAAL,CAAW2D,kBAAX,IAAiC,OAA3DF;QACD;MACF;IArLmC;;IAAAxD,wFAwLJ,iBAE4B;MAAA,IAD5DmC,WAC4D,SAD5DA,WAC4D;;MAC5D,IACE,MAAKwB,WAAL,IACAxB,WAAW,CAACW,QAAZX,KAAyBY,aAAMC,MAD/B,IAEA,MAAKjD,KAAL,CAAW6D,cAAX,KAA8B,aAHhC,EAIE;QACA,MAAKC,WAAL;MACD;IAjMmC;;IAAA7D,8EAoMd,iBAEsC;MAAA,IAD5DmC,WAC4D,SAD5DA,WAC4D;MAC5D,mBAAoD,MAAKpC,KAAzD;MAAA,IAAQM,WAAR,gBAAQA,WAAR;MAAA,IAAqBD,cAArB,gBAAqBA,cAArB;MAAA,IAAqCE,UAArC,gBAAqCA,UAArC;MACA,IAAQM,cAAR,GAA2B,MAAKT,KAAhC,CAAQS,cAAR;MACA,IAAoBJ,KAApB,GAAoD2B,WAApD,CAAMjB,YAAN;MAAA,IAA2B4C,SAA3B,GAAoD3B,WAApD,CAA2B2B,SAA3B;MAAA,IAAyCpD,MAAzC,GAAoDyB,WAApD,CAAsCI,CAAtC;;MAEA,IAAInC,cAAc,KAAK,MAAvB,EAA+B;QAG7BI,KAAK,GAAG,CAACA,KAATA;QACAE,MAAM,GAAGE,cAAc,GAAGF,MAA1BA;QACAoD,SAAS,GAAG,CAACA,SAAbA;MACD;;MAED,IAAMC,aAAa,GAAGrD,MAAM,GAAGF,KAA/B;MACA,IAAIwD,sBAAsB,GAAG,CAA7B;;MAEA,IAAI1D,UAAU,KAAK,OAAnB,EAA4B;QAC1B0D,sBAAsB,GACpBD,aAAa,GAAG1D,WAAhB0D,GAA+BA,aAAa,GAAG1D,WAA/C0D,GAA8D,CADhEC;MAED;;MAED,IAAMC,YAAY,GAChBzD,KAAK,GAAGwD,sBAARxD,IAAkC,MAAKmD,WAAL,GAAmBtD,WAAnB,GAAkC,CAApEG,CADF;MAEA,IAAM0D,WAAW,GAAGD,YAAY,GAAGxE,SAAS,GAAGqE,SAA/C;MAEA,IAAMK,UAAU,GAAGD,WAAW,GAAG7D,WAAW,GAAI,CAAhD;;MAEA,IAAI8D,UAAJ,EAAgB;QACd,MAAKC,aAAL,CAAmBH,YAAnB,EAAiC5D,WAAjC,EAA+CyD,SAA/C;MADF,OAEO;QACL,MAAKM,aAAL,CAAmBH,YAAnB,EAAiC,CAAjC,EAAoCH,SAApC;MACD;IArOmC;;IAAA9D,8EAwObqE,iBAAD,EAAsB;MAAA;;MAC5C,MAAKV,WAAL,GAAmBU,OAAnB;MACA,+BAAKC,wBAAL,CAA8BC,OAA9B,gFAAuCC,cAAvC,CAAsD;QACpDC,wBAAwB,EAAEJ;MAD0B,CAAtD;MAGA,+BAAKK,iBAAL,CAAuBH,OAAvB,gFAAgCC,cAAhC,CAA+C;QAC7CG,aAAa,EAAEN,OAAO,GAAG,MAAH,GAAY;MADW,CAA/C;MAGA,mBAAwD,MAAKtE,KAA7D;MAAA,IAAQK,cAAR,gBAAQA,cAAR;MAAA,IAAwBwE,gBAAxB,gBAAwBA,gBAAxB;MAAA,IAA0CC,SAA1C,gBAA0CA,SAA1C;MACA,IAAMC,QAAQ,GAAG1E,cAAc,KAAK,MAApC;MAIA,IAAM2E,kBAAkB,GACtB,CAACD,QAAQ,GAAG,CAAH,GAAO,CAAC,CAAjB,KAAuB,MAAKnB,WAAL,GAAmB,CAAC,CAApB,GAAwB,CAA/C,CADF;MAKA,IAAMqB,OAAO,GAAGF,QAAQ,GACpB;QAAEG,IAAI,EAAE,CAAR;QAAWvC,KAAK,EAAE2B,OAAO,GAAGa,SAAH,GAAeL;MAAxC,CADoB,GAEpB;QAAEM,KAAK,EAAE,CAAT;QAAYzC,KAAK,EAAE2B,OAAO,GAAGa,SAAH,GAAeL;MAAzC,CAFJ;MAIA,+BAAKO,iBAAL,CAAuBb,OAAvB,gFAAgCC,cAAhC,CAA+C;QAC7CQ,OAD6C,EAC7CA,OAD6C;QAE7CK,aAAa,EAAEN,kBAAkB,GAAGH;MAFS,CAA/C;IA9PoC;;IAAA5E,8EAoQd,UACtBsF,SADsB,EAEtBC,OAFsB,EAGtBC,QAHsB,EAItBC,KAJsB,EAKnB;MACH,MAAKtF,KAAL,CAAWK,KAAX,CAAiBS,QAAjB,CAA0B,CAA1B;;MACA,MAAKd,KAAL,CAAWO,MAAX,CAAkBO,QAAlB,CACE,MAAKlB,KAAL,CAAWK,cAAX,KAA8B,MAA9B,GAAuC,CAAvC,GAA2C,MAAKD,KAAL,CAAWS,cADxD;;MAIA,IAAI0E,SAAS,IAAI,IAAjB,EAAuB;QACrB,IAAII,iBAAiB,GAAGJ,SAAxB;;QACA,IAAI,MAAKvF,KAAL,CAAW6B,mBAAf,EAAoC;UAKlC,IAAI0D,SAAS,GAAGC,OAAZD,IAAuBE,QAAQ,GAAG,CAAtC,EAAyC;YACvCE,iBAAiB,GAAG1D,IAAI,CAAC2D,GAAL3D,CAASsD,SAAS,GAAGE,QAAQ,GAAG,IAAhCxD,EAAsCuD,OAAtCvD,CAApB0D;UADF,OAEO,IAAIJ,SAAS,GAAGC,OAAZD,IAAuBE,QAAQ,GAAG,CAAtC,EAAyC;YAC9CE,iBAAiB,GAAG1D,IAAI,CAAC4D,GAAL5D,CAASsD,SAAS,GAAGE,QAAQ,GAAG,IAAhCxD,EAAsCuD,OAAtCvD,CAApB0D;UACD;QACF;;QACD,MAAKvF,KAAL,CAAWQ,iBAAX,CAA6BM,QAA7B,CAAsCyE,iBAAtC;MACD;;MAED,IAAMG,QAAQ,GAAGN,OAAO,KAAK,CAA7B;;MACA,MAAKO,aAAL,CAAmBD,QAAnB;;MACA,MAAK3C,gBAAL,CAAsBtD,QAAtB,EAAgCiG,QAAhC;;MACA,MAAKrD,QAAL,CAAc;QAAEW,WAAW,EAAEvD;MAAf,CAAd;;MACA,IAAI,MAAKG,KAAL,CAAWwD,aAAf,EAA8B;QAC5BC,uBAAUC,SAAVD,CAAoBqC,QAApBrC,EAA8B,MAAKzD,KAAL,CAAW2D,kBAAX,IAAiC,OAA/DF;MACD;;MACD3C,sBAASkF,MAATlF,CAAgB,MAAKV,KAAL,CAAWQ,iBAA3BE,EAA8C;QAC5C2E,QAD4C,EAC5CA,QAD4C;QAE5CQ,UAAU,EAAE,CAFgC;QAG5CT,OAH4C,EAG5CA,OAH4C;QAI5C5D,eAAe,EAAE,MAAK5B,KAAL,CAAW6B,mBAJgB;QAK5C6D,KAAK,EAAEA,KAAF,SAAEA,SAAF,WAAEA,WAASP;MAL4B,CAA9CrE,EAMGoF,KANHpF,CAMS,iBAAkB;QAAA,IAAfqF,QAAe,SAAfA,QAAe;;QACzB,IAAIA,QAAJ,EAAc;UACZ,MAAKhD,gBAAL,CAAsBxD,IAAtB,EAA4BmG,QAA5B;;UACA,MAAKrD,QAAL,CAAc;YAAE2D,YAAY,EAAEN;UAAhB,CAAd;;UACA,IAAI,MAAK1F,KAAL,CAAWgD,WAAX,KAA2BxD,QAA/B,EAAyC;YAGvC,MAAK6C,QAAL,CAAc;cAAEW,WAAW,EAAEzD;YAAf,CAAd;UACD;;UACD,IAAImG,QAAJ,EAAc;YAAA;;YACZ,+CAAK9F,KAAL,EAAWqG,YAAX;UADF,OAEO;YAAA;;YACL,+CAAKrG,KAAL,EAAWsG,aAAX;UACD;QACF;MApBH;IAtSoC;;IAAArG,2EA8TzB,YAAwC;MAAA,IAAvCsG,OAAuC,uEAAP,EAAO;;MACnD,MAAKlC,aAAL,CAEEc,SAFF,EAGE,MAAKnF,KAAL,CAAWM,WAHb,EAIEiG,OAAO,CAACd,QAARc,GAAmBA,OAAO,CAACd,QAA3Bc,GAAsC,CAJxC,EAKEA,OAAO,CAACb,KALV;;MAUA,MAAKc,WAAL;IAzUoC;;IAAAvG,4EA4UxB,YAAwC;MAAA,IAAvCsG,OAAuC,uEAAP,EAAO;;MAEpD,MAAKlC,aAAL,CACEc,SADF,EAEE,CAFF,EAGEoB,OAAO,CAACd,QAARc,GAAmBA,OAAO,CAACd,QAA3Bc,GAAsC,CAHxC,EAIEA,OAAO,CAACb,KAJV;;MASA,MAAKc,WAAL;IAvVoC;;IAAAvG,8EA0Vd,YAAM;MAE5BwG,wBAAU,MAAKhF,SAAfgF,EAA0B,eAA1BA;MACA,IAAIC,cAAJ;;MAEA,IAAI,MAAKtG,KAAL,CAAWgD,WAAX,KAA2BzD,IAA/B,EAAqC;QACnC+G,cAAc,GAAG,MAAKjF,SAAtBiF;MADF,OAEO;QACLA,cAAc,GAAG,MAAKtG,KAAL,CAAWgG,YAAX,GAA0B,CAA1B,GAA8B,CAA/CM;MACD;;MAED,IAAMC,oBAAoB,GAAG;QAC3BC,OAAO,EAAEF,cADkB;QAE3BG,eAAe,EAAE,MAAK7G,KAAL,CAAW8G;MAFD,CAA7B;MAKA,OACE5G,oBAAC6G,oCAAD;QAAmBC,oBAAoB,EAAE,MAAKC;MAA9C,GACE/G,oBAACY,sBAASoG,IAAV;QACEtC,aAAa,EAAE,MAAKhB,WAAL,GAAmB,MAAnB,GAA4B,MAD7C;QAEEuD,GAAG,EAAE,MAAKxC,iBAFZ;QAGEyC,KAAK,EAAE,CAACC,MAAM,CAACC,OAAR,EAAiBX,oBAAjB;MAHT,EADF,CADF;IA1WoC;;IAAA1G,6EAqXf,YAAM;MAC3B,mBAOI,MAAKD,KAPT;MAAA,IACEuH,qBADF,gBACEA,qBADF;MAAA,IAEEjH,WAFF,gBAEEA,WAFF;MAAA,IAGED,cAHF,gBAGEA,cAHF;MAAA,IAIEE,UAJF,gBAIEA,UAJF;MAAA,IAKEiH,oBALF,gBAKEA,oBALF;MAAA,IAMEC,qBANF,gBAMEA,qBANF;MASA,IAAM1C,QAAQ,GAAG1E,cAAc,KAAK,MAApC;MACA,IAAMqH,WAAW,GAAGnH,UAAU,KAAK,MAAnC;MACA,IAAMoH,cAAc,GAAGpH,UAAU,KAAK,OAAtC;MAMA,IAAMqH,uBAAuB,GAAGC,yBAAYC,KAAZD,GAAoB9C,QAApB8C,GAA+B,CAAC9C,QAAhE;MAEA,IAAMgD,mBAAmB,GAAG;QAC1BlB,eAAe,EAAEU,qBADS;QAE1B5E,KAAK,EAAErC;MAFmB,CAA5B;MAIA,IAAMmB,SAAS,GAAG,MAAKA,SAAvB;MACAgF,wBAAUhF,SAAVgF,EAAqB,eAArBA;MAEA,IAAIuB,eAAJ;;MACA,IAAIL,cAAJ,EAAoB;QAClB,IAAMM,mBAAmB,GAAGxG,SAAS,CAACH,WAAVG,CAAsB;UAChDF,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;UAEhDC,WAAW,EAAEuD,QAAQ,GAAG,CAAC,CAAD,EAAIzE,WAAJ,CAAH,GAAuB,CAAC,CAAD,EAAI,CAACA,WAAL,CAFI;UAGhDoB,WAAW,EAAE;QAHmC,CAAtBD,CAA5B;QAKAuG,eAAe,GAAG;UAChBE,SAAS,EAAE,CAAC;YAAEC,UAAU,EAAEF;UAAd,CAAD;QADK,CAAlBD;MAGD;;MAED,IAAII,gBAAyD,GAAG,CAAhE;;MACA,IAAIV,WAAJ,EAAiB;QACf,IAAMW,kBAAkB,GAAGtD,QAAQ,GAAG,CAACzE,WAAJ,GAAmBA,WAAtD;;QACA,IAAI,MAAKF,KAAL,CAAWgD,WAAX,KAA2BzD,IAA/B,EAAqC;UACnCyI,gBAAgB,GAAG3G,SAAS,CAACH,WAAVG,CAAsB;YACvCF,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD2B;YAEvCC,WAAW,EAAE,CAAC6G,kBAAD,EAAqB,CAArB,CAF0B;YAGvC3G,WAAW,EAAE;UAH0B,CAAtBD,CAAnB2G;QADF,OAMO;UACLA,gBAAgB,GAAG,MAAKhI,KAAL,CAAWgG,YAAX,GAA0B,CAA1B,GAA8BiC,kBAAjDD;QACD;MACF;;MACD,IAAME,YAGL,GAAG;QACFJ,SAAS,EAAE,CAAC;UAAEC,UAAU,EAAEC;QAAd,CAAD,CADT;QAEFG,aAAa,EAAEX,uBAAuB,GAAG,aAAH,GAAmB;MAFvD,CAHJ;MAQA,OACE1H,oBAACY,sBAASoG,IAAV;QAAeE,KAAK,EAAEC,MAAM,CAACmB,IAA7B;QAAmCC,QAAQ,EAAE,MAAKC;MAAlD,GACExI,oBAACY,sBAASoG,IAAV;QACEE,KAAK,EAAE,CACL7G,UAAU,KAAK,OAAfA,GACI8G,MAAM,CAACsB,eADXpI,GAEI8G,MAAM,CAACuB,gBAHN,EAILZ,eAJK,EAKLP,qBALK,CADT;QAQEoB,yBAAyB,EACvB,MAAKjF,WAAL,GAAmB,qBAAnB,GAA2C;MAT/C,GAWG,OAAO,MAAK5D,KAAL,CAAW8I,QAAlB,KAA+B,UAA/B,GACG,MAAK9I,KAAL,CAAW8I,QAAX,CAAoB,MAAKrH,SAAzB,CADH,GAEG,MAAKzB,KAAL,CAAW8I,QAbjB,EAcG,MAAKC,aAAL,EAdH,CADF,EAiBE7I,oBAACY,sBAASoG,IAAV;QACEtC,aAAa,EAAC,UADhB;QAEEuC,GAAG,EAAE,MAAK5C,wBAFZ;QAGEG,wBAAwB,EAAE,MAAKd,WAHjC;QAIEwD,KAAK,EAAE,CAACC,MAAM,CAAC2B,eAAR,EAAyBV,YAAzB,EAAuCd,oBAAvC;MAJT,GAKEtH,oBAACgH,iBAAD;QAAME,KAAK,EAAEW;MAAb,GACG,MAAK/H,KAAL,CAAWiJ,oBAAX,CAAgC,MAAKxH,SAArC,CADH,CALF,CAjBF,CADF;IAjboC;;IAAAxB,iFAgdVkH,aAAD,EAA4B;MAAA;;MAGpD,MACE9B,iBADF,CACkEb,OADlE,GAC4E2C,GAD5E;MAED,+CAAKnH,KAAL,EAAWkJ,YAAX,mGAA0B/B,GAA1B;IArdoC;;IAGpC,IAAM1G,MAAK,GAAG,IAAIK,sBAASE,KAAb,CAAmB,CAAnB,CAAd;;IACA,IAAML,OAAM,GAAG,IAAIG,sBAASE,KAAb,CAAmB,CAAnB,CAAf;;IACA,IAAMJ,kBAAiB,GAAG,IAAIE,sBAASE,KAAb,CAAmB,CAAnB,CAA1B;;IAEA,MAAKZ,KAAL,GAAa;MACXK,KAAK,EAALA,MADW;MAEXE,MAAM,EAANA,OAFW;MAGXC,iBAAiB,EAAjBA,kBAHW;MAIXC,cAAc,EAAE,CAJL;MAKXuC,WAAW,EAAEzD,IALF;MAMXyG,YAAY,EAAE;IANH,CAAb;;IASA,MAAK+C,mBAAL,CAAyBnJ,MAAzB,EAAgC,MAAKI,KAArC;;IAhBoC;EAiBrC;;;;WAEDgJ,oCACEpJ,KADFoJ,EAEEhJ,KAFFgJ,EAGE;MACA,IACE,KAAKpJ,KAAL,CAAWK,cAAX,KAA8BL,KAAK,CAACK,cAApC,IACA,KAAKL,KAAL,CAAWM,WAAX,KAA2BN,KAAK,CAACM,WADjC,IAEA,KAAKN,KAAL,CAAWO,UAAX,KAA0BP,KAAK,CAACO,UAFhC,IAGA,KAAKH,KAAL,CAAWS,cAAX,KAA8BT,KAAK,CAACS,cAJtC,EAKE;QACA,KAAKsI,mBAAL,CAAyBnJ,KAAzB,EAAgCI,KAAhC;MACD;IACF;;;WAybDiJ,kBAAS;MACP,mBAKI,KAAKrJ,KALT;MAAA,IACEK,cADF,gBACEA,cADF;MAAA,IAEEwD,cAFF,gBAEEA,cAFF;MAAA,IAGEiB,SAHF,gBAGEA,SAHF;MAAA,IAIED,gBAJF,gBAIEA,gBAJF;MAOA,IAAME,QAAQ,GAAG1E,cAAc,KAAK,MAApC;MAKA,IAAM2E,kBAAkB,GACtB,CAACD,QAAQ,GAAG,CAAH,GAAO,CAAC,CAAjB,KAAuB,KAAKnB,WAAL,GAAmB,CAAC,CAApB,GAAwB,CAA/C,CADF;MAMA,IAAMqB,OAAO,GAAGF,QAAQ,GACpB;QAAEG,IAAI,EAAE,CAAR;QAAWvC,KAAK,EAAE,KAAKiB,WAAL,GAAmBuB,SAAnB,GAA+BL;MAAjD,CADoB,GAEpB;QAAEM,KAAK,EAAE,CAAT;QAAYzC,KAAK,EAAE,KAAKiB,WAAL,GAAmBuB,SAAnB,GAA+BL;MAAlD,CAFJ;MAIA,OACE5E,oBAACoJ,oCAAD;QAEEnC,GAAG,EAAE,KAAKoC,gBAFZ;QAGEtE,OAAO,EAAEA,OAHX;QAIEK,aAAa,EAAEN,kBAAkB,GAAGH,gBAJtC;QAKE2E,WAAW,EAAE,CAAC,CAAC,EAAF,EAAM,EAAN,CALf;QAMElH,cAAc,EAAE,KAAKA,cANvB;QAOE0E,oBAAoB,EAAE,KAAKyC,yBAP7B;QAQEC,8BAA8B,EAC5B,KAAK1J,KAAL,CAAW0J,8BATf;QAWEC,OAAO,EACL9F,cAAc,KAAK,eAAnBA,IAAsCA,cAAc,KAAK;MAZ7D,GAcG,KAAK+F,YAAL,EAdH,CADF;IAkBD;;;EAjhBuCC,e;;;;gBAArB/J,c,gBAIG;EACpBQ,WAAW,EAAE,GADO;EAEpBD,cAAc,EAAE,MAFI;EAGpBwB,mBAAmB,EAAE,IAHD;EAIpBtB,UAAU,EAAE,OAJQ;EAKpBuE,SAAS,EAAE,EALS;EAMpBD,gBAAgB,EAAE,CANE;EAOpBiC,YAAY,EAAE,oBAPM;EAQpBjD,cAAc,EAAE,UARI;EASpB6F,8BAA8B,EAAE;AATZ;;gBAJH5J,c,aA0DA;EACjBgK,IAAI,EAAE,MADW;EAEjBC,KAAK,EAAE;AAFU;;AA0drB,IAAM1C,MAAM,GAAG2C,wBAAWC,MAAXD,CAAkB;EAC/BhB,eAAe,oBACVgB,wBAAWE,kBADD;IAEbC,MAAM,EAAE,IAFK;IAGb5B,aAAa,EAAE;EAHF,EADgB;EAM/BK,gBAAgB,oBACXoB,wBAAWE,kBADA;IAEdC,MAAM,EAAE;EAFM,EANe;EAU/BxB,eAAe,oBACVqB,wBAAWE,kBADD,CAVgB;EAa/B1B,IAAI,EAAE;IACJ4B,IAAI,EAAE,CADF;IAEJD,MAAM,EAAE,CAFJ;IAGJE,QAAQ,EAAE;EAHN,CAbyB;EAkB/B/C,OAAO,oBACF0C,wBAAWE,kBADT;IAELC,MAAM,EAAE;EAFH;AAlBwB,CAAlBH,CAAf","names":["DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","props","_defineProperty","React","createRef","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","State","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","drawerOpened","onDrawerOpen","onDrawerClose","options","forceUpdate","invariant","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","TapGestureHandler","onHandlerStateChange","onTapHandlerStateChange","View","ref","style","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","onGestureRef","updateAnimatedEvent","UNSAFE_componentWillUpdate","render","PanGestureHandler","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Component","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: Animated.AnimatedInterpolation) => React.ReactNode);\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private openValue?: Animated.AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // it's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | Animated.AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | Animated.AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (this\n      .panGestureHandler as React.MutableRefObject<PanGestureHandler>).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}