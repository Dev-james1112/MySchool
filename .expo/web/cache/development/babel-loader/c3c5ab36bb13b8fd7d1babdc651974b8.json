{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executeNativeBackPress = executeNativeBackPress;\nexports.isSearchBarAvailableForCurrentPlatform = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar isSearchBarAvailableForCurrentPlatform = ['ios', 'android'].includes(_reactNative.Platform.OS);\nexports.isSearchBarAvailableForCurrentPlatform = isSearchBarAvailableForCurrentPlatform;\n\nfunction executeNativeBackPress() {\n  _reactNative.BackHandler.exitApp();\n\n  return true;\n}","map":{"version":3,"mappings":";;;;;;AAAA;;AAEO,IAAMA,sCAAsC,GAAG,CACpD,KADoD,EAEpD,SAFoD,EAGpDC,QAHoD,CAG3CC,sBAASC,EAHkC,CAA/C;;;AAKA,SAASC,sBAAT,GAAkC;EAEvCC,yBAAYC,OAAZD;;EACA,OAAO,IAAP;AACD","names":["isSearchBarAvailableForCurrentPlatform","includes","Platform","OS","executeNativeBackPress","BackHandler","exitApp"],"sources":["utils.ts"],"sourcesContent":["import { BackHandler, Platform } from 'react-native';\n\nexport const isSearchBarAvailableForCurrentPlatform = [\n  'ios',\n  'android',\n].includes(Platform.OS);\n\nexport function executeNativeBackPress() {\n  // This function invokes the native back press event\n  BackHandler.exitApp();\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}