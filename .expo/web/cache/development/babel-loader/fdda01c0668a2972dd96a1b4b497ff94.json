{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useSyncState;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar UNINTIALIZED_STATE = {};\n\nfunction useSyncState(initialState) {\n  var stateRef = React.useRef(UNINTIALIZED_STATE);\n  var isSchedulingRef = React.useRef(false);\n  var isMountedRef = React.useRef(true);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  var _React$useState = React.useState(stateRef.current),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      trackingState = _React$useState2[0],\n      setTrackingState = _React$useState2[1];\n\n  var getState = React.useCallback(function () {\n    return stateRef.current;\n  }, []);\n  var setState = React.useCallback(function (state) {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  var scheduleUpdate = React.useCallback(function (callback) {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  var flushUpdates = React.useCallback(function () {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    setTrackingState(stateRef.current);\n  }, []);\n\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  var state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;AAEA,IAAMA,kBAAkB,GAAG,EAA3B;;AAKe,SAASC,YAAT,CAAyBC,YAAzB,EAAuD;EACpE,IAAMC,QAAQ,GAAGC,KAAK,CAACC,MAAND,CAAgBJ,kBAAhBI,CAAjB;EACA,IAAME,eAAe,GAAGF,KAAK,CAACC,MAAND,CAAa,KAAbA,CAAxB;EACA,IAAMG,YAAY,GAAGH,KAAK,CAACC,MAAND,CAAa,IAAbA,CAArB;EAEAA,KAAK,CAACI,SAANJ,CAAgB,YAAM;IACpBG,YAAY,CAACE,OAAbF,GAAuB,IAAvBA;IAEA,OAAO,YAAM;MACXA,YAAY,CAACE,OAAbF,GAAuB,KAAvBA;IADF;EAHF,GAMG,EANHH;;EAQA,IAAID,QAAQ,CAACM,OAATN,KAAqBH,kBAAzB,EAA6C;IAC3CG,QAAQ,CAACM,OAATN,GAEE,OAAOD,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAFxDC;EAGD;;EAED,sBAA0CC,KAAK,CAACM,QAANN,CAAeD,QAAQ,CAACM,OAAxBL,CAA1C;EAAA;EAAA,IAAOO,aAAP;EAAA,IAAsBC,gBAAtB;;EAEA,IAAMC,QAAQ,GAAGT,KAAK,CAACU,WAANV,CAAkB;IAAA,OAAMD,QAAQ,CAACM,OAAf;EAAA,CAAlBL,EAA0C,EAA1CA,CAAjB;EAEA,IAAMW,QAAQ,GAAGX,KAAK,CAACU,WAANV,CAAmBY,eAAD,EAAc;IAC/C,IAAIA,KAAK,KAAKb,QAAQ,CAACM,OAAnBO,IAA8B,CAACT,YAAY,CAACE,OAAhD,EAAyD;MACvD;IACD;;IAEDN,QAAQ,CAACM,OAATN,GAAmBa,KAAnBb;;IAEA,IAAI,CAACG,eAAe,CAACG,OAArB,EAA8B;MAC5BG,gBAAgB,CAACI,KAAD,CAAhBJ;IACD;EATc,GAUd,EAVcR,CAAjB;EAYA,IAAMa,cAAc,GAAGb,KAAK,CAACU,WAANV,CAAmBc,kBAAD,EAA0B;IACjEZ,eAAe,CAACG,OAAhBH,GAA0B,IAA1BA;;IAEA,IAAI;MACFY,QAAQ;IADV,UAEU;MACRZ,eAAe,CAACG,OAAhBH,GAA0B,KAA1BA;IACD;EAPoB,GAQpB,EARoBF,CAAvB;EAUA,IAAMe,YAAY,GAAGf,KAAK,CAACU,WAANV,CAAkB,YAAM;IAC3C,IAAI,CAACG,YAAY,CAACE,OAAlB,EAA2B;MACzB;IAFyC;;IAO3CG,gBAAgB,CAACT,QAAQ,CAACM,OAAV,CAAhBG;EAPmB,GAQlB,EARkBR,CAArB;;EAYA,IAAIO,aAAa,KAAKR,QAAQ,CAACM,OAA/B,EAAwC;IACtCG,gBAAgB,CAACT,QAAQ,CAACM,OAAV,CAAhBG;EACD;;EAED,IAAMI,KAAK,GAAGb,QAAQ,CAACM,OAAvB;EAEAL,KAAK,CAACgB,aAANhB,CAAoBY,KAApBZ;EAEA,OAAO,CAACY,KAAD,EAAQH,QAAR,EAAkBE,QAAlB,EAA4BE,cAA5B,EAA4CE,YAA5C,CAAP;AACD","names":["UNINTIALIZED_STATE","useSyncState","initialState","stateRef","React","useRef","isSchedulingRef","isMountedRef","useEffect","current","useState","trackingState","setTrackingState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates","useDebugValue"],"sources":["useSyncState.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState<T>(initialState?: (() => T) | T) {\n  const stateRef = React.useRef<T>(UNINTIALIZED_STATE as any);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n      // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n      typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n\n  const getState = React.useCallback(() => stateRef.current, []);\n\n  const setState = React.useCallback((state: T) => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n\n  const scheduleUpdate = React.useCallback((callback: () => void) => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n\n  React.useDebugValue(state);\n\n  return [state, getState, setState, scheduleUpdate, flushUpdates] as const;\n}\n"]},"metadata":{},"sourceType":"script"}