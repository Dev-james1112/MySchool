{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationBuilder;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _routers = require(\"@react-navigation/routers\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactIs = require(\"react-is\");\n\nvar _Group = _interopRequireDefault(require(\"./Group\"));\n\nvar _isArrayEqual = _interopRequireDefault(require(\"./isArrayEqual\"));\n\nvar _isRecordEqual = _interopRequireDefault(require(\"./isRecordEqual\"));\n\nvar _NavigationHelpersContext = _interopRequireDefault(require(\"./NavigationHelpersContext\"));\n\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\n\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\n\nvar _Screen = _interopRequireDefault(require(\"./Screen\"));\n\nvar _types = require(\"./types\");\n\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\n\nvar _useComponent = _interopRequireDefault(require(\"./useComponent\"));\n\nvar _useCurrentRender = _interopRequireDefault(require(\"./useCurrentRender\"));\n\nvar _useDescriptors = _interopRequireDefault(require(\"./useDescriptors\"));\n\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\n\nvar _useFocusedListenersChildrenAdapter = _interopRequireDefault(require(\"./useFocusedListenersChildrenAdapter\"));\n\nvar _useFocusEvents = _interopRequireDefault(require(\"./useFocusEvents\"));\n\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\n\nvar _useNavigationHelpers = _interopRequireDefault(require(\"./useNavigationHelpers\"));\n\nvar _useOnAction = _interopRequireDefault(require(\"./useOnAction\"));\n\nvar _useOnGetState = _interopRequireDefault(require(\"./useOnGetState\"));\n\nvar _useOnRouteFocus = _interopRequireDefault(require(\"./useOnRouteFocus\"));\n\nvar _useRegisterNavigator = _interopRequireDefault(require(\"./useRegisterNavigator\"));\n\nvar _useScheduleUpdate = _interopRequireDefault(require(\"./useScheduleUpdate\"));\n\nvar _excluded = [\"children\", \"screenListeners\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n_types.PrivateValueStore;\n\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\n\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n\n    if (React.isValidElement(child)) {\n      if (child.type === _Screen.default) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the screen '\" + child.props.name + \"'. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === _Group.default) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the group. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push.apply(acc, (0, _toConsumableArray2.default)(getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== _Group.default ? groupOptions : groupOptions != null ? [].concat((0, _toConsumableArray2.default)(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n          name = _config$props.name,\n          children = _config$props.children,\n          component = _config$props.component,\n          getComponent = _config$props.getComponent;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n\n        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\"Got a component with the name '\" + component.name + \"' for the screen '\" + name + \"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");\n          }\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n\n  return configs;\n};\n\nfunction useNavigationBuilder(createRouter, options) {\n  var navigatorKey = (0, _useRegisterNavigator.default)();\n  var route = React.useContext(_NavigationRouteContext.default);\n  var children = options.children,\n      screenListeners = options.screenListeners,\n      rest = (0, _objectWithoutProperties2.default)(options, _excluded);\n\n  var _React$useRef = React.useRef(createRouter(Object.assign({}, rest, route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n    initialRouteName: route.params.screen\n  } : null))),\n      router = _React$useRef.current;\n\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config.props.name + \"')\");\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key !== null && key !== void 0 ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return Object.assign(acc, (0, _defineProperty2.default)({}, curr, screens[curr].props.getId));\n  }, {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n\n  var _React$useContext = React.useContext(_NavigationStateContext.default),\n      currentState = _React$useContext.state,\n      getCurrentState = _React$useContext.getState,\n      setCurrentState = _React$useContext.setState,\n      setKey = _React$useContext.setKey,\n      getKey = _React$useContext.getKey,\n      getIsInitial = _React$useContext.getIsInitial;\n\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n\n  var _React$useMemo = React.useMemo(function () {\n    var _route$params4;\n\n    var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n      var _route$params, _route$params2, _route$params3;\n\n      var initialParams = screens[curr].props.initialParams;\n      var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? Object.assign({}, initialParams, initialParamsFromParams) : undefined;\n      return acc;\n    }, {});\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), true];\n    } else {\n      var _route$params$state, _route$params5;\n\n      return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), false];\n    }\n  }, [currentState, router, isStateValid]),\n      _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),\n      initializedState = _React$useMemo2[0],\n      isFirstStateInitialization = _React$useMemo2[1];\n\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n\n  if (!(0, _isArrayEqual.default)(state.routeNames, routeNames) || !(0, _isRecordEqual.default)(routeKeyList, previousRouteKeyList)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = _routers.CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = _routers.CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n\n  var shouldUpdate = state !== nextState;\n  (0, _useScheduleUpdate.default)(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = (0, _useEventEmitter.default)(function (e) {\n    var _ref;\n\n    var routeNames = [];\n    var route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, (0, _toConsumableArray2.default)(Object.keys(screens).filter(function (name) {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    var navigation = descriptors[route.key].navigation;\n\n    var listeners = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)([screenListeners].concat((0, _toConsumableArray2.default)(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  (0, _useFocusEvents.default)({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n      childListeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var onAction = (0, _useOnAction.default)({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = (0, _useOnRouteFocus.default)({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = (0, _useNavigationHelpers.default)({\n    id: options.id,\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  (0, _useFocusedListenersChildrenAdapter.default)({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  (0, _useOnGetState.default)({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = (0, _useDescriptors.default)({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  (0, _useCurrentRender.default)({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = (0, _useComponent.default)(_NavigationHelpersContext.default.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"mappings":"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","names":["PrivateValueStore","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","React","Children","toArray","reduce","acc","child","isValidElement","type","Screen","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","Group","screenOptions","_child$type","String","process","env","NODE_ENV","forEach","config","component","getComponent","isValidElementType","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","useRegisterNavigator","route","useContext","NavigationRouteContext","screenListeners","rest","useRef","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","NavigationStateContext","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","_route$params5","initializedState","isFirstStateInitialization","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","isArrayEqual","isRecordEqual","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","CommonActions","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","useScheduleUpdate","setTimeout","initializedStateRef","emitter","useEventEmitter","e","target","routes","find","_route","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","useFocusEvents","emit","data","useChildListeners","childListeners","addListener","useKeyedChildListeners","keyedListeners","addKeyedListener","onAction","useOnAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","id","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","useDescriptors","defaultScreenOptions","useCurrentRender","NavigationContent","useComponent","NavigationHelpersContext","Provider","value"],"sources":["useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}