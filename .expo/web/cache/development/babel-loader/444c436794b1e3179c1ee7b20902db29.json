{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _Dimensions = _interopRequireDefault(require(\"../Dimensions\"));\n\nvar PixelRatio = function () {\n  function PixelRatio() {\n    (0, _classCallCheck2.default)(this, PixelRatio);\n  }\n\n  (0, _createClass2.default)(PixelRatio, null, [{\n    key: \"get\",\n    value: function get() {\n      return _Dimensions.default.get('window').scale;\n    }\n  }, {\n    key: \"getFontScale\",\n    value: function getFontScale() {\n      return _Dimensions.default.get('window').fontScale || PixelRatio.get();\n    }\n  }, {\n    key: \"getPixelSizeForLayoutSize\",\n    value: function getPixelSizeForLayoutSize(layoutSize) {\n      return Math.round(layoutSize * PixelRatio.get());\n    }\n  }, {\n    key: \"roundToNearestPixel\",\n    value: function roundToNearestPixel(layoutSize) {\n      var ratio = PixelRatio.get();\n      return Math.round(layoutSize * ratio) / ratio;\n    }\n  }]);\n  return PixelRatio;\n}();\n\nexports.default = PixelRatio;","map":{"version":3,"names":["PixelRatio","Dimensions","get","scale","fontScale","layoutSize","Math","round","ratio"],"sources":["C:/.project/today_meal/node_modules/react-native-web/dist/exports/PixelRatio/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport Dimensions from '../Dimensions';\n/**\n * PixelRatio gives access to the device pixel density.\n */\n\nexport default class PixelRatio {\n  /**\n   * Returns the device pixel density.\n   */\n  static get() {\n    return Dimensions.get('window').scale;\n  }\n  /**\n   * No equivalent for Web\n   */\n\n\n  static getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n\n\n  static getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n\n\n  static roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n}"],"mappings":";;;;;;;;;;;AASA;;IAKqBA,U;;;;;;;WAInB,eAAa;MACX,OAAOC,mBAAA,CAAWC,GAAX,CAAe,QAAf,EAAyBC,KAAhC;IACD;;;WAMD,wBAAsB;MACpB,OAAOF,mBAAA,CAAWC,GAAX,CAAe,QAAf,EAAyBE,SAAzB,IAAsCJ,UAAU,CAACE,GAAX,EAA7C;IACD;;;WAOD,mCAAiCG,UAAjC,EAA6C;MAC3C,OAAOC,IAAI,CAACC,KAAL,CAAWF,UAAU,GAAGL,UAAU,CAACE,GAAX,EAAxB,CAAP;IACD;;;WASD,6BAA2BG,UAA3B,EAAuC;MACrC,IAAIG,KAAK,GAAGR,UAAU,CAACE,GAAX,EAAZ;MACA,OAAOI,IAAI,CAACC,KAAL,CAAWF,UAAU,GAAGG,KAAxB,IAAiCA,KAAxC;IACD"},"metadata":{},"sourceType":"script"}