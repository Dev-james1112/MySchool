{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SafeAreaProviderCompat;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar _Dimensions$get = _reactNative.Dimensions.get('window'),\n    _Dimensions$get$width = _Dimensions$get.width,\n    width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width,\n    _Dimensions$get$heigh = _Dimensions$get.height,\n    height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh;\n\nvar initialMetrics = _reactNative.Platform.OS === 'web' || _reactNativeSafeAreaContext.initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : _reactNativeSafeAreaContext.initialWindowMetrics;\n\nfunction SafeAreaProviderCompat(_ref) {\n  var children = _ref.children,\n      style = _ref.style;\n  return React.createElement(_reactNativeSafeAreaContext.SafeAreaInsetsContext.Consumer, null, function (insets) {\n    if (insets) {\n      return React.createElement(_reactNative.View, {\n        style: [styles.container, style]\n      }, children);\n    }\n\n    return React.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":";;;;;AAAA;;AACA;;AAQA;;;;;;AAWA,sBAAkCA,wBAAWC,GAAXD,CAAe,QAAfA,CAAlC;AAAA,4CAAQE,KAAR;AAAA,IAAQA,KAAR,sCAAgB,CAAhB;AAAA,4CAAmBC,MAAnB;AAAA,IAAmBA,MAAnB,sCAA4B,CAA5B;;AAKA,IAAMC,cAAc,GAClBC,sBAASC,EAATD,KAAgB,KAAhBA,IAAyBE,oDAAwB,IAAjDF,GACI;EACEG,KAAK,EAAE;IAAEC,CAAC,EAAE,CAAL;IAAQC,CAAC,EAAE,CAAX;IAAcR,KAAd,EAAcA,KAAd;IAAqBC;EAArB,CADT;EAEEQ,MAAM,EAAE;IAAEC,GAAG,EAAE,CAAP;IAAUC,IAAI,EAAE,CAAhB;IAAmBC,KAAK,EAAE,CAA1B;IAA6BC,MAAM,EAAE;EAArC;AAFV,CADJV,GAKIE,gDANN;;AAQe,SAASS,sBAAT,OAA4D;EAAA,IAA1BC,QAA0B,QAA1BA,QAA0B;EAAA,IAAhBC,KAAgB,QAAhBA,KAAgB;EACzE,OACEC,oBAACC,kDAAsBC,QAAvB,QACIV,gBAAD,EAAY;IACX,IAAIA,MAAJ,EAAY;MAIV,OAAOQ,oBAACG,iBAAD;QAAMJ,KAAK,EAAE,CAACK,MAAM,CAACC,SAAR,EAAmBN,KAAnB;MAAb,GAAyCD,QAAzC,CAAP;IACD;;IAED,OACEE,oBAACM,4CAAD;MAAkBrB,cAAc,EAAEA,cAAlC;MAAkDc,KAAK,EAAEA;IAAzD,GACGD,QADH,CADF;EATJ,EADF;AAkBD;;AAEDD,sBAAsB,CAACZ,cAAvBY,GAAwCZ,cAAxCY;;AAEA,IAAMO,MAAM,GAAGG,wBAAWC,MAAXD,CAAkB;EAC/BF,SAAS,EAAE;IACTI,IAAI,EAAE;EADG;AADoB,CAAlBF,CAAf","names":["Dimensions","get","width","height","initialMetrics","Platform","OS","initialWindowMetrics","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","children","style","React","SafeAreaInsetsContext","Consumer","View","styles","container","SafeAreaProvider","StyleSheet","create","flex"],"sources":["SafeAreaProviderCompat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport {\n  initialWindowMetrics,\n  SafeAreaInsetsContext,\n  SafeAreaProvider,\n} from 'react-native-safe-area-context';\n\ntype Props = {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics =\n  Platform.OS === 'web' || initialWindowMetrics == null\n    ? {\n        frame: { x: 0, y: 0, width, height },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : initialWindowMetrics;\n\nexport default function SafeAreaProviderCompat({ children, style }: Props) {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return <View style={[styles.container, style]}>{children}</View>;\n        }\n\n        return (\n          <SafeAreaProvider initialMetrics={initialMetrics} style={style}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}