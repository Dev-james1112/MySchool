{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RotationGesture = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _gesture = require(\"./gesture\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar changeEventCalculator = function () {\n  var _f = function _f(current, previous) {\n    var changePayload;\n\n    if (previous === undefined) {\n      changePayload = {\n        rotationChange: current.rotation\n      };\n    } else {\n      changePayload = {\n        rotationChange: current.rotation - previous.rotation\n      };\n    }\n\n    return Object.assign({}, current, changePayload);\n  };\n\n  _f._closure = {};\n  _f.asString = \"function changeEventCalculator(current,previous){let changePayload;if(previous===undefined){changePayload={rotationChange:current.rotation};}else{changePayload={rotationChange:current.rotation-previous.rotation};}return{...current,...changePayload};}\";\n  _f.__workletHash = 1266182141109;\n  _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\rotationGesture.js (3:0)\";\n  return _f;\n}();\n\nvar RotationGesture = function (_ContinousBaseGesture) {\n  (0, _inherits2.default)(RotationGesture, _ContinousBaseGesture);\n\n  var _super = _createSuper(RotationGesture);\n\n  function RotationGesture() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RotationGesture);\n    _this = _super.call(this);\n    _this.handlerName = 'RotationGestureHandler';\n    return _this;\n  }\n\n  (0, _createClass2.default)(RotationGesture, [{\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(RotationGesture.prototype), \"onChange\", this).call(this, callback);\n    }\n  }]);\n  return RotationGesture;\n}(_gesture.ContinousBaseGesture);\n\nexports.RotationGesture = RotationGesture;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAQSA,qB;uBACPC,O,EACAC,Q,EACA;IAEA,IAAIC,aAAJ;;IACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;MAC1BD,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK;MADV,CAAhBH;IADF,OAIO;MACLA,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK,QAARL,GAAmBC,QAAQ,CAACI;MAD9B,CAAhBH;IAGD;;IAED,yBAAYF,OAAZ,EAAwBE,aAAxB;EACD,C;;;;;;;;;IAEYI,e;;;;;EAIXC,2BAAc;IAAA;;IAAA;IACZ;IAEA,MAAKC,WAAL,GAAmB,wBAAnB;IAHY;EAIb;;;;WAEDC,kBACEC,QADFD,EAME;MAEA,KAAKE,QAAL,CAAcZ,qBAAd,GAAsCA,qBAAtC;MACA,iHAAsBW,QAAtB;IACD;;;EApBkCE,6B","names":["changeEventCalculator","current","previous","changePayload","undefined","rotationChange","rotation","RotationGesture","constructor","handlerName","onChange","callback","handlers","ContinousBaseGesture"],"sources":["rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"]},"metadata":{},"sourceType":"script"}