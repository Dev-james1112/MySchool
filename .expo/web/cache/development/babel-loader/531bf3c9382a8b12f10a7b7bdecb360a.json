{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _routers = require(\"@react-navigation/routers\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _checkDuplicateRouteNames = _interopRequireDefault(require(\"./checkDuplicateRouteNames\"));\n\nvar _checkSerializable = _interopRequireDefault(require(\"./checkSerializable\"));\n\nvar _createNavigationContainerRef = require(\"./createNavigationContainerRef\");\n\nvar _EnsureSingleNavigator = _interopRequireDefault(require(\"./EnsureSingleNavigator\"));\n\nvar _findFocusedRoute = _interopRequireDefault(require(\"./findFocusedRoute\"));\n\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\n\nvar _NavigationContainerRefContext = _interopRequireDefault(require(\"./NavigationContainerRefContext\"));\n\nvar _NavigationContext = _interopRequireDefault(require(\"./NavigationContext\"));\n\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\n\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\n\nvar _UnhandledActionContext = _interopRequireDefault(require(\"./UnhandledActionContext\"));\n\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\n\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\n\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\n\nvar _useOptionsGetters2 = _interopRequireDefault(require(\"./useOptionsGetters\"));\n\nvar _useScheduleUpdate = require(\"./useScheduleUpdate\");\n\nvar _useSyncState3 = _interopRequireDefault(require(\"./useSyncState\"));\n\nvar _excluded = [\"key\", \"routeNames\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar serializableWarnings = [];\nvar duplicateNameWarnings = [];\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n      routeNames = state.routeNames,\n      partialState = (0, _objectWithoutProperties2.default)(state, _excluded);\n  return Object.assign({}, partialState, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return Object.assign({}, route, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n      onStateChange = _ref.onStateChange,\n      onUnhandledAction = _ref.onUnhandledAction,\n      independent = _ref.independent,\n      children = _ref.children;\n  var parent = React.useContext(_NavigationStateContext.default);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  var _useSyncState = (0, _useSyncState3.default)(function () {\n    return getPartialState(initialState == null ? undefined : initialState);\n  }),\n      _useSyncState2 = (0, _slicedToArray2.default)(_useSyncState, 5),\n      state = _useSyncState2[0],\n      getState = _useSyncState2[1],\n      setState = _useSyncState2[2],\n      scheduleUpdate = _useSyncState2[3],\n      flushUpdates = _useSyncState2[4];\n\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n      listeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var dispatch = React.useCallback(function (action) {\n    if (listeners.focus[0] == null) {\n      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(action);\n      });\n    }\n  }, [listeners.focus]);\n  var canGoBack = React.useCallback(function () {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n      return navigation.canGoBack();\n    }),\n        result = _listeners$focus$.result,\n        handled = _listeners$focus$.handled;\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n\n    if (target == null) {\n      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(Object.assign({}, _routers.CommonActions.reset(state), {\n          target: target\n        }));\n      });\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n\n    if (state == null) {\n      return undefined;\n    }\n\n    var route = (0, _findFocusedRoute.default)(state);\n    return route;\n  }, [getRootState]);\n  var emitter = (0, _useEventEmitter.default)();\n\n  var _useOptionsGetters = (0, _useOptionsGetters2.default)({}),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n      getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n\n  var navigation = React.useMemo(function () {\n    return Object.assign({}, Object.keys(_routers.CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(_routers.CommonActions[name].apply(_routers.CommonActions, arguments));\n      };\n\n      return acc;\n    }, {}), emitter.create('root'), {\n      dispatch: dispatch,\n      resetRoot: resetRoot,\n      isFocused: function isFocused() {\n        return true;\n      },\n      canGoBack: canGoBack,\n      getParent: function getParent() {\n        return undefined;\n      },\n      getState: function getState() {\n        return stateRef.current;\n      },\n      getRootState: getRootState,\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions,\n      isReady: function isReady() {\n        return listeners.focus[0] != null;\n      }\n    });\n  }, [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, function () {\n    return navigation;\n  }, [navigation]);\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var stackRef = React.useRef();\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  var stateRef = React.useRef(state);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(function () {\n    var hydratedState = getRootState();\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        var serializableResult = (0, _checkSerializable.default)(hydratedState);\n\n        if (!serializableResult.serializable) {\n          var location = serializableResult.location,\n              reason = serializableResult.reason;\n          var path = '';\n          var pointer = hydratedState;\n          var params = false;\n\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \" + curr;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\" + curr + \"]\";\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\" + curr;\n              } else {\n                path += \"[\" + JSON.stringify(curr) + \"]\";\n              }\n            }\n          }\n\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\" + path + \" (\" + reason + \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\";\n\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n\n        var duplicateRouteNamesResult = (0, _checkDuplicateRouteNames.default)(hydratedState);\n\n        if (duplicateRouteNamesResult.length) {\n          var _message = \"Found screens with the same name nested inside one another. Check:\\n\" + duplicateRouteNamesResult.map(function (locations) {\n            return \"\\n\" + locations.join(', ');\n          }) + \"\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.\";\n\n          if (!duplicateNameWarnings.includes(_message)) {\n            duplicateNameWarnings.push(_message);\n            console.warn(_message);\n          }\n        }\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    var payload = action.payload;\n    var message = \"The action '\" + action.type + \"'\" + (payload ? \" with payload \" + JSON.stringify(action.payload) : '') + \" was not handled by any navigator.\";\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\" + payload.name + \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\";\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n\n        break;\n\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(_NavigationContainerRefContext.default.Provider, {\n    value: navigation\n  }, React.createElement(_useScheduleUpdate.ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(_NavigationBuilderContext.default.Provider, {\n    value: builderContext\n  }, React.createElement(_NavigationStateContext.default.Provider, {\n    value: context\n  }, React.createElement(_UnhandledActionContext.default.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(_EnsureSingleNavigator.default, null, children))))));\n\n  if (independent) {\n    element = React.createElement(_NavigationRouteContext.default.Provider, {\n      value: undefined\n    }, React.createElement(_NavigationContext.default.Provider, {\n      value: undefined\n    }, element));\n  }\n\n  return element;\n});\nvar _default = BaseNavigationContainer;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","React","forwardRef","ref","initialState","onStateChange","onUnhandledAction","independent","children","parent","useContext","NavigationStateContext","isDefault","Error","useSyncState","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","useChildListeners","listeners","addListener","useKeyedChildListeners","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","NOT_INITIALIZED_ERROR","navigation","canGoBack","result","handled","resetRoot","target","root","_keyedListeners$getSt","CommonActions","reset","getRootState","_keyedListeners$getSt3","getCurrentRoute","findFocusedRoute","emitter","useEventEmitter","useOptionsGetters","addOptionsGetter","getCurrentOptions","useMemo","Object","keys","reduce","acc","name","arguments","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","process","env","NODE_ENV","serializableResult","checkSerializable","serializable","location","reason","path","pointer","params","i","length","curr","prev","_pointer","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","checkDuplicateRouteNames","locations","join","defaultOnUnhandledAction","payload","element","NavigationContainerRefContext","Provider","value","ScheduleUpdateContext","NavigationBuilderContext","UnhandledActionContext","EnsureSingleNavigator","NavigationRouteContext","NavigationContext"],"sources":["BaseNavigationContainer.tsx"],"sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"script"}