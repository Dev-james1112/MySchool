{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Extrapolate = void 0;\nexports.default = interpolate;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _operators = require(\"../operators\");\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _AnimatedNode = _interopRequireDefault(require(\"../core/AnimatedNode\"));\n\nvar _AnimatedCond = require(\"../core/AnimatedCond\");\n\nvar _AnimatedFunction = require(\"../core/AnimatedFunction\");\n\nvar interpolateInternalSingleProc = (0, _AnimatedFunction.createAnimatedFunction)(function (value, inS, inE, outS, outE) {\n  var progress = (0, _operators.divide)((0, _operators.sub)(value, inS), (0, _operators.sub)(inE, inS));\n  var resultForNonZeroRange = (0, _operators.add)(outS, (0, _operators.multiply)(progress, (0, _operators.sub)(outE, outS)));\n  var result = (0, _AnimatedCond.createAnimatedCond)((0, _operators.eq)(inS, inE), (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessOrEq)(value, inS), outS, outE), resultForNonZeroRange);\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  var inS = inputRange[offset];\n  var inE = inputRange[offset + 1];\n  var outS = outputRange[offset];\n  var outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange) {\n  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n\n  return (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));\n}\n\nvar Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity'\n};\nexports.Extrapolate = Extrapolate;\n\nfunction checkNonDecreasing(name, arr) {\n  for (var i = 1; i < arr.length; ++i) {\n    if (arr[i] instanceof _AnimatedNode.default || arr[i - 1] instanceof _AnimatedNode.default) continue;\n    (0, _invariant.default)(arr[i] >= arr[i - 1], '%s must be monotonically non-decreasing. (%s)', name, arr);\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  (0, _invariant.default)(arr.length >= 2, '%s must have at least 2 elements. (%s)', name, arr);\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] instanceof _AnimatedNode.default || typeof arr[i] !== 'number') continue;\n    (0, _invariant.default)(Number.isFinite(arr[i]), '%s cannot include %s. (%s)', name, arr[i], arr);\n  }\n}\n\nfunction convertToRadians(outputRange) {\n  for (var _ref of outputRange.entries()) {\n    var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n\n    var i = _ref2[0];\n    var value = _ref2[1];\n\n    if (typeof value === 'string' && value.endsWith('deg')) {\n      outputRange[i] = parseFloat(value) * (Math.PI / 180);\n    } else if (typeof value === 'string' && value.endsWith('rad')) {\n      outputRange[i] = parseFloat(value);\n    }\n  }\n}\n\nfunction interpolate(value, config) {\n  var inputRange = config.inputRange,\n      outputRange = config.outputRange,\n      _config$extrapolate = config.extrapolate,\n      extrapolate = _config$extrapolate === void 0 ? Extrapolate.EXTEND : _config$extrapolate,\n      extrapolateLeft = config.extrapolateLeft,\n      extrapolateRight = config.extrapolateRight;\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange and outputRange must be the same length.');\n  convertToRadians(outputRange);\n  var left = extrapolateLeft || extrapolate;\n  var right = extrapolateRight || extrapolate;\n  var output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.CLAMP) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.CLAMP) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);\n  } else if (right === Extrapolate.IDENTITY) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), value, output);\n  }\n\n  return output;\n}","map":{"version":3,"names":["interpolateInternalSingleProc","proc","value","inS","inE","outS","outE","progress","divide","sub","resultForNonZeroRange","add","multiply","result","cond","eq","lessOrEq","interpolateInternalSingle","inputRange","outputRange","offset","interpolateInternal","length","lessThan","Extrapolate","EXTEND","CLAMP","IDENTITY","checkNonDecreasing","name","arr","i","AnimatedNode","invariant","checkMinElements","checkValidNumbers","Number","isFinite","convertToRadians","entries","endsWith","parseFloat","Math","PI","interpolate","config","extrapolate","extrapolateLeft","extrapolateRight","left","right","output","greaterThan"],"sources":["C:/.project/today_meal/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolate.js"],"sourcesContent":["import {\n  lessThan,\n  multiply,\n  sub,\n  add,\n  divide,\n  greaterThan,\n  lessOrEq,\n  eq,\n} from '../operators';\nimport invariant from 'invariant';\n\nimport AnimatedNode from '../core/AnimatedNode';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\nimport { createAnimatedFunction as proc } from '../core/AnimatedFunction';\n\nconst interpolateInternalSingleProc = proc(function (\n  value,\n  inS,\n  inE,\n  outS,\n  outE\n) {\n  const progress = divide(sub(value, inS), sub(inE, inS));\n  // logic below was made in order to provide a compatibility witn an Animated API\n  const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));\n  const result = cond(\n    eq(inS, inE),\n    cond(lessOrEq(value, inS), outS, outE),\n    resultForNonZeroRange\n  );\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  const inS = inputRange[offset];\n  const inE = inputRange[offset + 1];\n  const outS = outputRange[offset];\n  const outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange, offset = 0) {\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(\n    lessThan(value, inputRange[offset + 1]),\n    interpolateInternalSingle(value, inputRange, outputRange, offset),\n    interpolateInternal(value, inputRange, outputRange, offset + 1)\n  );\n}\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nfunction checkNonDecreasing(name, arr) {\n  for (let i = 1; i < arr.length; ++i) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)\n      continue;\n    invariant(\n      arr[i] >= arr[i - 1],\n      '%s must be monotonically non-decreasing. (%s)',\n      name,\n      arr\n    );\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  invariant(\n    arr.length >= 2,\n    '%s must have at least 2 elements. (%s)',\n    name,\n    arr\n  );\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (let i = 0; i < arr.length; i++) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || typeof arr[i] !== 'number') continue;\n    invariant(\n      Number.isFinite(arr[i]),\n      '%s cannot include %s. (%s)',\n      name,\n      arr[i],\n      arr\n    );\n  }\n}\n\nfunction convertToRadians(outputRange) {\n  for (const [i, value] of outputRange.entries()) {\n    if (typeof value === 'string' && value.endsWith('deg')) {\n      outputRange[i] = parseFloat(value) * (Math.PI / 180);\n    } else if (typeof value === 'string' && value.endsWith('rad')) {\n      outputRange[i] = parseFloat(value);\n    }\n  }\n}\n\nexport default function interpolate(value, config) {\n  const {\n    inputRange,\n    outputRange,\n    extrapolate = Extrapolate.EXTEND,\n    extrapolateLeft,\n    extrapolateRight,\n  } = config;\n\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange and outputRange must be the same length.'\n  );\n\n  convertToRadians(outputRange);\n  const left = extrapolateLeft || extrapolate;\n  const right = extrapolateRight || extrapolate;\n  let output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.CLAMP) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      outputRange[outputRange.length - 1],\n      output\n    );\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      value,\n      output\n    );\n  }\n\n  return output;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}