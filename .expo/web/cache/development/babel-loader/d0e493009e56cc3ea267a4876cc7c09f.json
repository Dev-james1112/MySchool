{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findHandler = findHandler;\nexports.findHandlerByTestID = findHandlerByTestID;\nexports.findOldGestureHandler = findOldGestureHandler;\nexports.getNextHandlerTag = getNextHandlerTag;\nexports.handlerIDToTag = void 0;\nexports.registerHandler = registerHandler;\nexports.registerOldGestureHandler = registerOldGestureHandler;\nexports.unregisterHandler = unregisterHandler;\n\nvar _utils = require(\"../utils\");\n\nvar handlerIDToTag = {};\nexports.handlerIDToTag = handlerIDToTag;\nvar gestures = new Map();\nvar oldHandlers = new Map();\nvar testIDs = new Map();\nvar handlerTag = 1;\n\nfunction getNextHandlerTag() {\n  return handlerTag++;\n}\n\nfunction registerHandler(handlerTag, handler, testID) {\n  gestures.set(handlerTag, handler);\n\n  if ((0, _utils.isJestEnv)() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nfunction registerOldGestureHandler(handlerTag, handler) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nfunction unregisterHandler(handlerTag, testID) {\n  gestures.delete(handlerTag);\n\n  if ((0, _utils.isJestEnv)() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nfunction findHandler(handlerTag) {\n  return gestures.get(handlerTag);\n}\n\nfunction findOldGestureHandler(handlerTag) {\n  return oldHandlers.get(handlerTag);\n}\n\nfunction findHandlerByTestID(testID) {\n  var handlerTag = testIDs.get(testID);\n\n  if (handlerTag !== undefined) {\n    var _findHandler;\n\n    return (_findHandler = findHandler(handlerTag)) !== null && _findHandler !== void 0 ? _findHandler : null;\n  }\n\n  return null;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AAIO,IAAMA,cAAsC,GAAG,EAA/C;;AACP,IAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACA,IAAMC,WAAW,GAAG,IAAID,GAAJ,EAApB;AACA,IAAME,OAAO,GAAG,IAAIF,GAAJ,EAAhB;AAEA,IAAIG,UAAU,GAAG,CAAjB;;AAEO,SAASC,iBAAT,GAAqC;EAC1C,OAAOD,UAAU,EAAjB;AACD;;AAEM,SAASE,eAAT,CACLF,UADK,EAELG,OAFK,EAGLC,MAHK,EAIL;EACAR,QAAQ,CAACS,GAATT,CAAaI,UAAbJ,EAAyBO,OAAzBP;;EACA,IAAIU,2BAAeF,MAAnB,EAA2B;IACzBL,OAAO,CAACM,GAARN,CAAYK,MAAZL,EAAoBC,UAApBD;EACD;AACF;;AAEM,SAASQ,yBAAT,CACLP,UADK,EAELG,OAFK,EAGL;EACAL,WAAW,CAACO,GAAZP,CAAgBE,UAAhBF,EAA4BK,OAA5BL;AACD;;AAEM,SAASU,iBAAT,CAA2BR,UAA3B,EAA+CI,MAA/C,EAAgE;EACrER,QAAQ,CAACa,MAATb,CAAgBI,UAAhBJ;;EACA,IAAIU,2BAAeF,MAAnB,EAA2B;IACzBL,OAAO,CAACU,MAARV,CAAeK,MAAfL;EACD;AACF;;AAEM,SAASW,WAAT,CAAqBV,UAArB,EAAyC;EAC9C,OAAOJ,QAAQ,CAACe,GAATf,CAAaI,UAAbJ,CAAP;AACD;;AAEM,SAASgB,qBAAT,CAA+BZ,UAA/B,EAAmD;EACxD,OAAOF,WAAW,CAACa,GAAZb,CAAgBE,UAAhBF,CAAP;AACD;;AAEM,SAASe,mBAAT,CAA6BT,MAA7B,EAA6C;EAClD,IAAMJ,UAAU,GAAGD,OAAO,CAACY,GAARZ,CAAYK,MAAZL,CAAnB;;EACA,IAAIC,UAAU,KAAKc,SAAnB,EAA8B;IAAA;;IAC5B,uBAAOJ,WAAW,CAACV,UAAD,CAAlB,uDAAkC,IAAlC;EACD;;EACD,OAAO,IAAP;AACD","names":["handlerIDToTag","gestures","Map","oldHandlers","testIDs","handlerTag","getNextHandlerTag","registerHandler","handler","testID","set","isJestEnv","registerOldGestureHandler","unregisterHandler","delete","findHandler","get","findOldGestureHandler","findHandlerByTestID","undefined"],"sources":["handlersRegistry.ts"],"sourcesContent":["import { isJestEnv } from '../utils';\nimport { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\n\nexport const handlerIDToTag: Record<string, number> = {};\nconst gestures = new Map<number, GestureType>();\nconst oldHandlers = new Map<number, GestureHandlerCallbacks>();\nconst testIDs = new Map<string, number>();\n\nlet handlerTag = 1;\n\nexport function getNextHandlerTag(): number {\n  return handlerTag++;\n}\n\nexport function registerHandler(\n  handlerTag: number,\n  handler: GestureType,\n  testID?: string\n) {\n  gestures.set(handlerTag, handler);\n  if (isJestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nexport function registerOldGestureHandler(\n  handlerTag: number,\n  handler: GestureHandlerCallbacks\n) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nexport function unregisterHandler(handlerTag: number, testID?: string) {\n  gestures.delete(handlerTag);\n  if (isJestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nexport function findHandler(handlerTag: number) {\n  return gestures.get(handlerTag);\n}\n\nexport function findOldGestureHandler(handlerTag: number) {\n  return oldHandlers.get(handlerTag);\n}\n\nexport function findHandlerByTestID(testID: string) {\n  const handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    return findHandler(handlerTag) ?? null;\n  }\n  return null;\n}\n\nexport interface GestureHandlerCallbacks {\n  onGestureEvent: (event: GestureEvent<any>) => void;\n  onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"]},"metadata":{},"sourceType":"script"}