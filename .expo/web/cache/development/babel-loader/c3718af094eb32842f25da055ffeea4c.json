{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinkTo;\n\nvar _core = require(\"@react-navigation/core\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _LinkingContext = _interopRequireDefault(require(\"./LinkingContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useLinkTo() {\n  var navigation = React.useContext(_core.NavigationContainerRefContext);\n  var linking = React.useContext(_LinkingContext.default);\n  var linkTo = React.useCallback(function (to) {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n\n    if (typeof to !== 'string') {\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n\n    if (!to.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\" + to + \").\");\n    }\n\n    var options = linking.options;\n    var state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : (0, _core.getStateFromPath)(to, options === null || options === void 0 ? void 0 : options.config);\n\n    if (state) {\n      var action = (0, _core.getActionFromState)(state, options === null || options === void 0 ? void 0 : options.config);\n\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAKA;;AAEA;;;;;;AAiBe,SAASA,SAAT,GAEX;EACF,IAAMC,UAAU,GAAGC,KAAK,CAACC,UAAND,CAAiBE,mCAAjBF,CAAnB;EACA,IAAMG,OAAO,GAAGH,KAAK,CAACC,UAAND,CAAiBI,uBAAjBJ,CAAhB;EAEA,IAAMK,MAAM,GAAGL,KAAK,CAACM,WAANN,CACZO,YAAD,EAAuB;IACrB,IAAIR,UAAU,KAAKS,SAAnB,EAA8B;MAC5B,MAAM,IAAIC,KAAJ,CACJ,kFADI,CAAN;IAGD;;IAED,IAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;MAE1BR,UAAU,CAACW,QAAXX,CAAoBQ,EAAE,CAACI,MAAvBZ,EAA+BQ,EAAE,CAACK,MAAlCb;MACA;IACD;;IAED,IAAI,CAACQ,EAAE,CAACM,UAAHN,CAAc,GAAdA,CAAL,EAAyB;MACvB,MAAM,IAAIE,KAAJ,oCAA2CF,EAA3C,QAAN;IACD;;IAED,IAAQO,OAAR,GAAoBX,OAApB,CAAQW,OAAR;IAEA,IAAMC,KAAK,GAAGD,OAAO,SAAPA,WAAO,WAAPA,WAAO,CAAEE,gBAATF,GACVA,OAAO,CAACE,gBAARF,CAAyBP,EAAzBO,EAA6BA,OAAO,CAACG,MAArCH,CADUA,GAEVE,4BAAiBT,EAAjBS,EAAqBF,OAAL,SAAKA,WAAL,WAAKA,GAAL,MAAKA,UAAO,CAAEG,MAA9BD,CAFJ;;IAIA,IAAID,KAAJ,EAAW;MACT,IAAMG,MAAM,GAAGC,8BAAmBJ,KAAnBI,EAA0BL,OAAR,SAAQA,WAAR,WAAQA,GAAR,MAAQA,UAAO,CAAEG,MAAnCE,CAAf;;MAEA,IAAID,MAAM,KAAKV,SAAf,EAA0B;QACxBT,UAAU,CAACqB,QAAXrB,CAAoBmB,MAApBnB;MADF,OAEO;QACLA,UAAU,CAACsB,KAAXtB,CAAiBgB,KAAjBhB;MACD;IAPH,OAQO;MACL,MAAM,IAAIU,KAAJ,CAAU,iDAAV,CAAN;IACD;EAlCU,GAoCb,CAACN,OAAD,EAAUJ,UAAV,CApCaC,CAAf;EAuCA,OAAOK,MAAP;AACD","names":["useLinkTo","navigation","React","useContext","NavigationContainerRefContext","linking","LinkingContext","linkTo","useCallback","to","undefined","Error","navigate","screen","params","startsWith","options","state","getStateFromPath","config","action","getActionFromState","dispatch","reset"],"sources":["useLinkTo.tsx"],"sourcesContent":["import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"script"}