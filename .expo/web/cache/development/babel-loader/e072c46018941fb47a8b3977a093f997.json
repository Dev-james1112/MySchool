{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Gestures = void 0;\n\nvar _constants = require(\"./web/constants\");\n\nvar _FlingGestureHandler = _interopRequireDefault(require(\"./web/FlingGestureHandler\"));\n\nvar _LongPressGestureHandler = _interopRequireDefault(require(\"./web/LongPressGestureHandler\"));\n\nvar _NativeViewGestureHandler = _interopRequireDefault(require(\"./web/NativeViewGestureHandler\"));\n\nvar NodeManager = _interopRequireWildcard(require(\"./web/NodeManager\"));\n\nvar _PanGestureHandler = _interopRequireDefault(require(\"./web/PanGestureHandler\"));\n\nvar _PinchGestureHandler = _interopRequireDefault(require(\"./web/PinchGestureHandler\"));\n\nvar _RotationGestureHandler = _interopRequireDefault(require(\"./web/RotationGestureHandler\"));\n\nvar _TapGestureHandler = _interopRequireDefault(require(\"./web/TapGestureHandler\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Gestures = {\n  PanGestureHandler: _PanGestureHandler.default,\n  RotationGestureHandler: _RotationGestureHandler.default,\n  PinchGestureHandler: _PinchGestureHandler.default,\n  TapGestureHandler: _TapGestureHandler.default,\n  NativeViewGestureHandler: _NativeViewGestureHandler.default,\n  LongPressGestureHandler: _LongPressGestureHandler.default,\n  FlingGestureHandler: _FlingGestureHandler.default\n};\nexports.Gestures = Gestures;\nvar _default = {\n  Direction: _constants.Direction,\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures)) throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n    var GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n  flushOperations: function flushOperations() {}\n};\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEO,IAAMA,QAAQ,GAAG;EACtBC,iBADsB,EACtBA,0BADsB;EAEtBC,sBAFsB,EAEtBA,+BAFsB;EAGtBC,mBAHsB,EAGtBA,4BAHsB;EAItBC,iBAJsB,EAItBA,0BAJsB;EAKtBC,wBALsB,EAKtBA,iCALsB;EAMtBC,uBANsB,EAMtBA,gCANsB;EAOtBC,mBAPsB,EAOtBA;AAPsB,CAAjB;;eAWQ;EACbC,SADa,EACbA,oBADa;EAEbC,oBAFa,gCAEQC,GAFR,EAEqBC,oBAFrB,EAEoD;IAC/DC,OAAO,CAACC,IAARD,CAAa,wBAAbA,EAAuCF,GAAvCE,EAA4CD,oBAA5CC;EAHW;EAKbE,sBALa,oCAKY;IACvBF,OAAO,CAACC,IAARD,CAAa,0BAAbA;EANW;EAQbG,oBARa,gCASXC,WATW,EAUXC,UAVW,EAWXC,MAXW,EAYX;IAEA,IAAI,EAAEF,WAAW,IAAIhB,QAAjB,CAAJ,EACE,MAAM,IAAImB,KAAJ,oCAC6BH,WAD7B,+BAAN;IAGF,IAAMI,YAAY,GAAGpB,QAAQ,CAACgB,WAAD,CAA7B;IACAK,WAAW,CAACN,oBAAZM,CAAiCJ,UAAjCI,EAA6C,IAAID,YAAJ,EAA7CC;IACA,KAAKC,oBAAL,CAA0BL,UAA1B,EAAsCC,MAAtC;EApBW;EAsBbK,oBAtBa,gCAuBXN,UAvBW,EAwBXO,OAxBW,EAyBXC,WAzBW,EA0BXC,QA1BW,EA2BX;IACAL,WAAW,CAACM,UAAZN,CAAuBJ,UAAvBI,EAAmCO,OAAnCP,CAA2CG,OAA3CH,EAAoDK,QAApDL;EA5BW;EA8BbC,oBA9Ba,gCA8BQL,UA9BR,EA8B4BY,SA9B5B,EA8B4C;IACvDR,WAAW,CAACM,UAAZN,CAAuBJ,UAAvBI,EAAmCS,mBAAnCT,CAAuDQ,SAAvDR;EA/BW;EAiCbU,qBAjCa,iCAiCSd,UAjCT,EAiC6B;IACxC,OAAOI,WAAW,CAACM,UAAZN,CAAuBJ,UAAvBI,CAAP;EAlCW;EAoCbW,kBApCa,8BAoCMf,UApCN,EAoC0B;IACrCI,WAAW,CAACW,kBAAZX,CAA+BJ,UAA/BI;EArCW;EAwCbY,eAxCa,6BAwCK,CAAE;AAxCP,C","names":["Gestures","PanGestureHandler","RotationGestureHandler","PinchGestureHandler","TapGestureHandler","NativeViewGestureHandler","LongPressGestureHandler","FlingGestureHandler","Direction","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","NodeManager","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["RNGestureHandlerModule.web.ts"],"sourcesContent":["import { ActionType } from './ActionType';\nimport { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag: number) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"script"}