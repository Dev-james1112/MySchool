{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _InteractionManager = _interopRequireDefault(require(\"../../../exports/InteractionManager\"));\n\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    (0, _classCallCheck2.default)(this, Batchinator);\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n\n  (0, _createClass2.default)(Batchinator, [{\n    key: \"dispose\",\n    value: function dispose(options) {\n      if (options === void 0) {\n        options = {\n          abort: false\n        };\n      }\n\n      if (this._taskHandle) {\n        this._taskHandle.cancel();\n\n        if (!options.abort) {\n          this._callback();\n        }\n\n        this._taskHandle = null;\n      }\n    }\n  }, {\n    key: \"schedule\",\n    value: function schedule() {\n      var _this = this;\n\n      if (this._taskHandle) {\n        return;\n      }\n\n      var timeoutHandle = setTimeout(function () {\n        _this._taskHandle = _InteractionManager.default.runAfterInteractions(function () {\n          _this._taskHandle = null;\n\n          _this._callback();\n        });\n      }, this._delay);\n      this._taskHandle = {\n        cancel: function cancel() {\n          return clearTimeout(timeoutHandle);\n        }\n      };\n    }\n  }]);\n  return Batchinator;\n}();\n\nvar _default = Batchinator;\nexports.default = _default;","map":{"version":3,"names":["Batchinator","callback","delayMS","_delay","_callback","options","abort","_taskHandle","cancel","timeoutHandle","setTimeout","InteractionManager","runAfterInteractions","clearTimeout"],"sources":["C:/.project/today_meal/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nclass Batchinator {\n  constructor(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  }\n\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: () => clearTimeout(timeoutHandle)\n    };\n  }\n\n}\n\nexport default Batchinator;"],"mappings":"AASA;;;;;;;;;;;;;AAEA;;IAwBMA,W;EACJ,qBAAYC,QAAZ,EAAsBC,OAAtB,EAA+B;IAAA;IAC7B,KAAKC,MAAL,GAAcD,OAAd;IACA,KAAKE,SAAL,GAAiBH,QAAjB;EACD;;;;WASD,iBAAQI,OAAR,EAAiB;MACf,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;QACtBA,OAAO,GAAG;UACRC,KAAK,EAAE;QADC,CAAV;MAGD;;MAED,IAAI,KAAKC,WAAT,EAAsB;QACpB,KAAKA,WAAL,CAAiBC,MAAjB;;QAEA,IAAI,CAACH,OAAO,CAACC,KAAb,EAAoB;UAClB,KAAKF,SAAL;QACD;;QAED,KAAKG,WAAL,GAAmB,IAAnB;MACD;IACF;;;WAED,oBAAW;MAAA;;MACT,IAAI,KAAKA,WAAT,EAAsB;QACpB;MACD;;MAED,IAAIE,aAAa,GAAGC,UAAU,CAAC,YAAM;QACnC,KAAI,CAACH,WAAL,GAAmBI,2BAAA,CAAmBC,oBAAnB,CAAwC,YAAM;UAG/D,KAAI,CAACL,WAAL,GAAmB,IAAnB;;UAEA,KAAI,CAACH,SAAL;QACD,CANkB,CAAnB;MAOD,CAR6B,EAQ3B,KAAKD,MARsB,CAA9B;MASA,KAAKI,WAAL,GAAmB;QACjBC,MAAM,EAAE;UAAA,OAAMK,YAAY,CAACJ,aAAD,CAAlB;QAAA;MADS,CAAnB;IAGD;;;;;eAIYT,W"},"metadata":{},"sourceType":"script"}