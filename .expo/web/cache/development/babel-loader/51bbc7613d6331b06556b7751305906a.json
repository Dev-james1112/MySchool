{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = conditional;\n\nvar _reactNative = require(\"react-native\");\n\nvar add = _reactNative.Animated.add,\n    multiply = _reactNative.Animated.multiply;\n\nfunction conditional(condition, main, fallback) {\n  return add(multiply(condition, main), multiply(condition.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 0]\n  }), fallback));\n}","map":{"version":3,"mappings":";;;;;AAAA;;AAEA,IAAQA,GAAR,GAA0BC,qBAA1B,CAAQD,GAAR;AAAA,IAAaE,QAAb,GAA0BD,qBAA1B,CAAaC,QAAb;;AASe,SAASC,WAAT,CACbC,SADa,EAEbC,IAFa,EAGbC,QAHa,EAIb;EAOA,OAAON,GAAG,CACRE,QAAQ,CAACE,SAAD,EAAYC,IAAZ,CADA,EAERH,QAAQ,CACNE,SAAS,CAACG,WAAVH,CAAsB;IACpBI,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADQ;IAEpBC,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;EAFO,CAAtBL,CADM,EAKNE,QALM,CAFA,CAAV;AAUD","names":["add","Animated","multiply","conditional","condition","main","fallback","interpolate","inputRange","outputRange"],"sources":["conditional.tsx"],"sourcesContent":["import { Animated } from 'react-native';\n\nconst { add, multiply } = Animated;\n\n/**\n * Use an Animated Node based on a condition. Similar to Reanimated's `cond`.\n *\n * @param condition Animated Node representing the condition, must be 0 or 1, 1 means `true`, 0 means `false`\n * @param main Animated Node to use if the condition is `true`\n * @param fallback Animated Node to use if the condition is `false`\n */\nexport default function conditional(\n  condition: Animated.AnimatedInterpolation,\n  main: Animated.AnimatedInterpolation,\n  fallback: Animated.AnimatedInterpolation\n) {\n  // To implement this behavior, we multiply the main node with the condition.\n  // So if condition is 0, result will be 0, and if condition is 1, result will be main node.\n  // Then we multiple reverse of the condition (0 if condition is 1) with the fallback.\n  // So if condition is 0, result will be fallback node, and if condition is 1, result will be 0,\n  // This way, one of them will always be 0, and other one will be the value we need.\n  // In the end we add them both together, 0 + value we need = value we need\n  return add(\n    multiply(condition, main),\n    multiply(\n      condition.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0],\n      }),\n      fallback\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"script"}