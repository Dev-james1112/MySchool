{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = HeaderContainer;\n\nvar _elements = require(\"@react-navigation/elements\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _HeaderStyleInterpolators = require(\"../../TransitionConfigs/HeaderStyleInterpolators\");\n\nvar _Header = _interopRequireDefault(require(\"./Header\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction HeaderContainer(_ref) {\n  var mode = _ref.mode,\n      scenes = _ref.scenes,\n      layout = _ref.layout,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      onContentHeightChange = _ref.onContentHeightChange,\n      style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  var parentHeaderBack = React.useContext(_elements.HeaderBackContext);\n  return React.createElement(_reactNative.Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    var _self, _self2;\n\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    var _scene$descriptor$opt = scene.descriptor.options,\n        header = _scene$descriptor$opt.header,\n        headerMode = _scene$descriptor$opt.headerMode,\n        _scene$descriptor$opt2 = _scene$descriptor$opt.headerShown,\n        headerShown = _scene$descriptor$opt2 === void 0 ? true : _scene$descriptor$opt2,\n        headerTransparent = _scene$descriptor$opt.headerTransparent,\n        headerStyleInterpolator = _scene$descriptor$opt.headerStyleInterpolator;\n\n    if (headerMode !== mode || !headerShown) {\n      return null;\n    }\n\n    var isFocused = focusedRoute.key === scene.descriptor.route.key;\n    var previousScene = getPreviousScene({\n      route: scene.descriptor.route\n    });\n    var headerBack = parentHeaderBack;\n\n    if (previousScene) {\n      var _previousScene$descri = previousScene.descriptor,\n          options = _previousScene$descri.options,\n          route = _previousScene$descri.route;\n      headerBack = previousScene ? {\n        title: (0, _elements.getHeaderTitle)(options, route.name)\n      } : parentHeaderBack;\n    }\n\n    var previousDescriptor = (_self = self[i - 1]) === null || _self === void 0 ? void 0 : _self.descriptor;\n    var nextDescriptor = (_self2 = self[i + 1]) === null || _self2 === void 0 ? void 0 : _self2.descriptor;\n\n    var _ref2 = (previousDescriptor === null || previousDescriptor === void 0 ? void 0 : previousDescriptor.options) || {},\n        _ref2$headerShown = _ref2.headerShown,\n        previousHeaderShown = _ref2$headerShown === void 0 ? true : _ref2$headerShown,\n        previousHeaderMode = _ref2.headerMode;\n\n    var nextHeaderlessScene = self.slice(i + 1).find(function (scene) {\n      var _ref3 = (scene === null || scene === void 0 ? void 0 : scene.descriptor.options) || {},\n          _ref3$headerShown = _ref3.headerShown,\n          currentHeaderShown = _ref3$headerShown === void 0 ? true : _ref3$headerShown,\n          currentHeaderMode = _ref3.headerMode;\n\n      return currentHeaderShown === false || currentHeaderMode === 'screen';\n    });\n\n    var _ref4 = (nextHeaderlessScene === null || nextHeaderlessScene === void 0 ? void 0 : nextHeaderlessScene.descriptor.options) || {},\n        nextHeaderlessGestureDirection = _ref4.gestureDirection;\n\n    var isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') && !nextDescriptor || nextHeaderlessScene;\n    var props = {\n      layout: layout,\n      back: headerBack,\n      progress: scene.progress,\n      options: scene.descriptor.options,\n      route: scene.descriptor.route,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? _HeaderStyleInterpolators.forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? _HeaderStyleInterpolators.forSlideRight : _HeaderStyleInterpolators.forSlideLeft : headerStyleInterpolator : _HeaderStyleInterpolators.forNoAnimation\n    };\n    return React.createElement(_native.NavigationContext.Provider, {\n      key: scene.descriptor.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(_native.NavigationRouteContext.Provider, {\n      value: scene.descriptor.route\n    }, React.createElement(_reactNative.View, {\n      onLayout: onContentHeightChange ? function (e) {\n        var height = e.nativeEvent.layout.height;\n        onContentHeightChange({\n          route: scene.descriptor.route,\n          height: height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(_Header.default, props))));\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["HeaderContainer","mode","scenes","layout","getPreviousScene","getFocusedRoute","onContentHeightChange","style","focusedRoute","parentHeaderBack","React","useContext","HeaderBackContext","Animated","View","pointerEvents","slice","map","scene","i","self","length","descriptor","options","header","headerMode","headerShown","headerTransparent","headerStyleInterpolator","isFocused","key","route","previousScene","headerBack","title","getHeaderTitle","name","previousDescriptor","_self","nextDescriptor","_self2","previousHeaderShown","previousHeaderMode","nextHeaderlessScene","find","currentHeaderShown","currentHeaderMode","nextHeaderlessGestureDirection","gestureDirection","isHeaderStatic","props","back","progress","navigation","styleInterpolator","forSlideUp","forSlideRight","forSlideLeft","forNoAnimation","NavigationContext","Provider","value","NavigationRouteContext","onLayout","e","height","nativeEvent","undefined","accessibilityElementsHidden","importantForAccessibility","styles","Header","StyleSheet","create","position","top","left","right"],"sources":["HeaderContainer.tsx"],"sourcesContent":["import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  Route,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport {\n  forNoAnimation,\n  forSlideLeft,\n  forSlideRight,\n  forSlideUp,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderMode,\n  StackHeaderProps,\n  StackNavigationProp,\n} from '../../types';\nimport Header from './Header';\n\nexport type Props = {\n  mode: StackHeaderMode;\n  layout: Layout;\n  scenes: (Scene | undefined)[];\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const {\n          header,\n          headerMode,\n          headerShown = true,\n          headerTransparent,\n          headerStyleInterpolator,\n        } = scene.descriptor.options;\n\n        if (headerMode !== mode || !headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.descriptor.route.key;\n        const previousScene = getPreviousScene({\n          route: scene.descriptor.route,\n        });\n\n        let headerBack = parentHeaderBack;\n\n        if (previousScene) {\n          const { options, route } = previousScene.descriptor;\n\n          headerBack = previousScene\n            ? { title: getHeaderTitle(options, route.name) }\n            : parentHeaderBack;\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousDescriptor = self[i - 1]?.descriptor;\n        const nextDescriptor = self[i + 1]?.descriptor;\n\n        const {\n          headerShown: previousHeaderShown = true,\n          headerMode: previousHeaderMode,\n        } = previousDescriptor?.options || {};\n\n        // If any of the next screens don't have a header or header is part of the screen\n        // Then we need to move this header offscreen so that it doesn't cover it\n        const nextHeaderlessScene = self.slice(i + 1).find((scene) => {\n          const {\n            headerShown: currentHeaderShown = true,\n            headerMode: currentHeaderMode,\n          } = scene?.descriptor.options || {};\n\n          return currentHeaderShown === false || currentHeaderMode === 'screen';\n        });\n\n        const { gestureDirection: nextHeaderlessGestureDirection } =\n          nextHeaderlessScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          ((previousHeaderShown === false || previousHeaderMode === 'screen') &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextDescriptor) ||\n          nextHeaderlessScene;\n\n        const props: StackHeaderProps = {\n          layout,\n          back: headerBack,\n          progress: scene.progress,\n          options: scene.descriptor.options,\n          route: scene.descriptor.route,\n          navigation: scene.descriptor\n            .navigation as StackNavigationProp<ParamListBase>,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? nextHeaderlessGestureDirection === 'vertical' ||\n                  nextHeaderlessGestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : nextHeaderlessGestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : headerStyleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.descriptor.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.descriptor.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.descriptor.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}