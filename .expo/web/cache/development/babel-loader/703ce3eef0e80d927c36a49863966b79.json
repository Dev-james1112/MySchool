{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useDescriptors;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\n\nvar _NavigationContext = _interopRequireDefault(require(\"./NavigationContext\"));\n\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\n\nvar _SceneView = _interopRequireDefault(require(\"./SceneView\"));\n\nvar _useNavigationCache = _interopRequireDefault(require(\"./useNavigationCache\"));\n\nvar _useRouteCache = _interopRequireDefault(require(\"./useRouteCache\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction useDescriptors(_ref) {\n  var state = _ref.state,\n      screens = _ref.screens,\n      navigation = _ref.navigation,\n      screenOptions = _ref.screenOptions,\n      defaultScreenOptions = _ref.defaultScreenOptions,\n      onAction = _ref.onAction,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      addListener = _ref.addListener,\n      addKeyedListener = _ref.addKeyedListener,\n      onRouteFocus = _ref.onRouteFocus,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n      onDispatchAction = _React$useContext.onDispatchAction,\n      onOptionsChange = _React$useContext.onOptionsChange,\n      stackRef = _React$useContext.stackRef;\n\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange, stackRef]);\n  var navigations = (0, _useNavigationCache.default)({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = (0, _useRouteCache.default)(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var config = screens[route.name];\n    var screen = config.props;\n    var navigation = navigations[route.key];\n    var optionsList = [screenOptions].concat((0, _toConsumableArray2.default)(config.options ? config.options.filter(Boolean) : []), [screen.options, options[route.key]]);\n    var customOptions = optionsList.reduce(function (acc, curr) {\n      return Object.assign(acc, typeof curr !== 'function' ? curr : curr({\n        route: route,\n        navigation: navigation\n      }));\n    }, {});\n    var mergedOptions = Object.assign({}, typeof defaultScreenOptions === 'function' ? defaultScreenOptions({\n      route: route,\n      navigation: navigation,\n      options: customOptions\n    }) : defaultScreenOptions, customOptions);\n\n    var clearOptions = function clearOptions() {\n      return setOptions(function (o) {\n        if (route.key in o) {\n          var _route$key = route.key,\n              _ = o[_route$key],\n              rest = (0, _objectWithoutProperties2.default)(o, [_route$key].map(_toPropertyKey));\n          return rest;\n        }\n\n        return o;\n      });\n    };\n\n    acc[route.key] = {\n      route: route,\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(_NavigationBuilderContext.default.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(_NavigationContext.default.Provider, {\n          value: navigation\n        }, React.createElement(_NavigationRouteContext.default.Provider, {\n          value: route\n        }, React.createElement(_SceneView.default, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"mappings":"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","names":["useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","React","useState","options","setOptions","useContext","NavigationBuilderContext","onDispatchAction","onOptionsChange","stackRef","context","useMemo","navigations","useNavigationCache","routes","useRouteCache","reduce","acc","route","i","config","name","screen","props","key","optionsList","filter","Boolean","customOptions","curr","Object","assign","mergedOptions","clearOptions","o","_","rest","render","Provider","value","NavigationContext","NavigationRouteContext","SceneView","routeState"],"sources":["useDescriptors.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<\n          ParamListBase,\n          string,\n          string | undefined,\n          State,\n          ScreenOptions,\n          EventMap\n        > &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"script"}