{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedDebug = createAnimatedDebug;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _val = require(\"../val\");\n\nvar _AnimatedBlock = require(\"./AnimatedBlock\");\n\nvar _AnimatedCall = require(\"./AnimatedCall\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AnimatedDebug = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedDebug, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedDebug);\n\n  function AnimatedDebug(message, value) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedDebug);\n    (0, _invariant.default)(typeof message === 'string', \"Reanimated: Animated.debug node first argument should be of type string but got \" + message);\n    (0, _invariant.default)(value instanceof _AnimatedNode2.default, \"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \" + value);\n    _this = _super.call(this, {\n      type: 'debug',\n      message: message,\n      value: value\n    }, [value]);\n    _this._message = message;\n    _this._value = value;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedDebug, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedDebug, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var value = (0, _val.val)(this._value);\n      console.log(this._message, value);\n      return value;\n    }\n  }]);\n  return AnimatedDebug;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var _NativeModules$Native, _NativeModules$Native2, _NativeModules$Native3;\n\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n    var runningInExpoShell = ((_NativeModules$Native = _reactNative.NativeModules.NativeUnimoduleProxy) == null ? void 0 : (_NativeModules$Native2 = _NativeModules$Native.modulesConstants) == null ? void 0 : (_NativeModules$Native3 = _NativeModules$Native2.ExponentConstants) == null ? void 0 : _NativeModules$Native3.executionEnvironment) === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return (0, _AnimatedBlock.createAnimatedBlock)([(0, _AnimatedCall.createAnimatedCall)([value], function (_ref) {\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 1),\n            a = _ref2[0];\n\n        return console.log(message + \" \" + a);\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, (0, _AnimatedBlock.adapt)(value));\n    }\n  }\n\n  return value;\n}","map":{"version":3,"names":["AnimatedDebug","message","value","invariant","AnimatedNode","type","_message","_value","__nodeID","val","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","NativeModules","NativeUnimoduleProxy","modulesConstants","ExponentConstants","executionEnvironment","block","call","a","adapt"],"sources":["C:/.project/today_meal/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n        ?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;IAEMA,a;;;;;EAIJ,uBAAYC,OAAZ,EAAqBC,KAArB,EAA4B;IAAA;;IAAA;IAC1B,IAAAC,kBAAA,EACE,OAAOF,OAAP,KAAmB,QADrB,uFAEqFA,OAFrF;IAIA,IAAAE,kBAAA,EACED,KAAK,YAAYE,sBADnB,8FAE4FF,KAF5F;IAIA,0BAAM;MAAEG,IAAI,EAAE,OAAR;MAAiBJ,OAAO,EAAPA,OAAjB;MAA0BC,KAAK,EAALA;IAA1B,CAAN,EAAyC,CAACA,KAAD,CAAzC;IACA,MAAKI,QAAL,GAAgBL,OAAhB;IACA,MAAKM,MAAL,GAAcL,KAAd;IAX0B;EAY3B;;;;WAED,oBAAW;MACT,+BAA6B,KAAKM,QAAlC;IACD;;;WAED,wBAAe;MACb,IAAMN,KAAK,GAAG,IAAAO,QAAA,EAAI,KAAKF,MAAT,CAAd;MACAG,OAAO,CAACC,GAAR,CAAY,KAAKL,QAAjB,EAA2BJ,KAA3B;MACA,OAAOA,KAAP;IACD;;;EA1ByBE,sB;;AA6BrB,SAASQ,mBAAT,CAA6BX,OAA7B,EAAsCC,KAAtC,EAA6C;EAClD,IAAIW,OAAJ,EAAa;IAAA;;IAGX,IAAMC,uBAAuB,GAAG,OAAOC,IAAP,KAAgB,WAAhD;IAIA,IAAMC,kBAAkB,GACtB,0BAAAC,0BAAA,CAAcC,oBAAd,qEAAoCC,gBAApC,sEAAsDC,iBAAtD,4CACIC,oBADJ,MAC6B,aAF/B;;IAIA,IAAIP,uBAAuB,IAAIE,kBAA/B,EAAmD;MAGjD,OAAO,IAAAM,kCAAA,EAAM,CACX,IAAAC,gCAAA,EAAK,CAACrB,KAAD,CAAL,EAAc;QAAA;QAAA,IAAEsB,CAAF;;QAAA,OAASd,OAAO,CAACC,GAAR,CAAeV,OAAf,SAA0BuB,CAA1B,CAAT;MAAA,CAAd,CADW,EAEXtB,KAFW,CAAN,CAAP;IAID,CAPD,MAOO;MACL,OAAO,IAAIF,aAAJ,CAAkBC,OAAlB,EAA2B,IAAAwB,oBAAA,EAAMvB,KAAN,CAA3B,CAAP;IACD;EACF;;EAED,OAAOA,KAAP;AACD"},"metadata":{},"sourceType":"script"}