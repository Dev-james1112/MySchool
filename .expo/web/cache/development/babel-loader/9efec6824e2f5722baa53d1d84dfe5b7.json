{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _val = require(\"../val\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n\n  return aGuessT;\n}\n\nfunction bezier(mX1, mY1, mX2, mY2) {\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n\n    --currentSample;\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x;\n    }\n\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x === 1) {\n      return 1;\n    }\n\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n\nvar AnimatedBezier = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedBezier, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedBezier);\n\n  function AnimatedBezier(value, mX1, mY1, mX2, mY2) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedBezier);\n    (0, _invariant.default)(value instanceof _AnimatedNode2.default, \"Reanimated: Bezier node argument should be of type AnimatedNode but got \" + value);\n    _this = _super.call(this, {\n      type: 'bezier',\n      mX1: mX1,\n      mY1: mY1,\n      mX2: mX2,\n      mY2: mY2,\n      input: value\n    }, [value]);\n    _this._value = value;\n    _this._bezier = bezier(mX1, mY1, mX2, mY2);\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedBezier, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedBezier, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._bezier((0, _val.val)(this._value));\n    }\n  }]);\n  return AnimatedBezier;\n}(_AnimatedNode2.default);\n\nexports.default = AnimatedBezier;","map":{"version":3,"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","bezier","mY1","mY2","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x","AnimatedBezier","value","invariant","AnimatedNode","type","input","_value","_bezier","__nodeID","val"],"sources":["C:/.project/today_meal/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBezier.js"],"sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport invariant from 'invariant';\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nfunction bezier(mX1, mY1, mX2, mY2) {\n  // Precompute samples table\n  var sampleValues = float32ArraySupported\n    ? new Float32Array(kSplineTableSize)\n    : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n\nexport default class AnimatedBezier extends AnimatedNode {\n  _value;\n  _bezier;\n\n  constructor(value, mX1, mY1, mX2, mY2) {\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Bezier node argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'bezier', mX1, mY1, mX2, mY2, input: value }, [value]);\n    this._value = value;\n    this._bezier = bezier(mX1, mY1, mX2, mY2);\n  }\n\n  toString() {\n    return `AnimatedBezier, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._bezier(val(this._value));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}