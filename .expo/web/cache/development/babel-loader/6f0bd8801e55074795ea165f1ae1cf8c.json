{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = checkDuplicateRouteNames;\n\nfunction checkDuplicateRouteNames(state) {\n  var duplicates = [];\n\n  var getRouteNames = function getRouteNames(location, state) {\n    state.routes.forEach(function (route) {\n      var _route$state, _route$state$routeNam;\n\n      var currentLocation = location ? location + \" > \" + route.name : route.name;\n      (_route$state = route.state) === null || _route$state === void 0 ? void 0 : (_route$state$routeNam = _route$state.routeNames) === null || _route$state$routeNam === void 0 ? void 0 : _route$state$routeNam.forEach(function (routeName) {\n        if (routeName === route.name) {\n          duplicates.push([currentLocation, currentLocation + \" > \" + route.name]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n  return duplicates;\n}","map":{"version":3,"mappings":";;;;;AAEe,SAASA,wBAAT,CAAkCC,KAAlC,EAA0D;EACvE,IAAMC,UAAsB,GAAG,EAA/B;;EAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CACpBC,QADoB,EAEpBH,KAFoB,EAGjB;IACHA,KAAK,CAACI,MAANJ,CAAaK,OAAbL,CAAsBM,eAAD,EAAmC;MAAA;;MACtD,IAAMC,eAAe,GAAGJ,QAAQ,GACzBA,QADyB,WACXG,KAAK,CAACE,IADK,GAE5BF,KAAK,CAACE,IAFV;MAIA,qBAAK,CAACR,KAAN,uFAAaS,UAAb,gFAAyBJ,OAAzB,CAAkCK,mBAAD,EAAe;QAC9C,IAAIA,SAAS,KAAKJ,KAAK,CAACE,IAAxB,EAA8B;UAC5BP,UAAU,CAACU,IAAXV,CAAgB,CACdM,eADc,EAEXA,eAFW,WAEUD,KAAK,CAACE,IAFhB,CAAhBP;QAID;MANH;;MASA,IAAIK,KAAK,CAACN,KAAV,EAAiB;QACfE,aAAa,CAACK,eAAD,EAAkBD,KAAK,CAACN,KAAxB,CAAbE;MACD;IAhBH;EAJF;;EAwBAA,aAAa,CAAC,EAAD,EAAKF,KAAL,CAAbE;EAEA,OAAOD,UAAP;AACD","names":["checkDuplicateRouteNames","state","duplicates","getRouteNames","location","routes","forEach","route","currentLocation","name","routeNames","routeName","push"],"sources":["checkDuplicateRouteNames.tsx"],"sourcesContent":["import type { NavigationState, PartialState } from '@react-navigation/routers';\n\nexport default function checkDuplicateRouteNames(state: NavigationState) {\n  const duplicates: string[][] = [];\n\n  const getRouteNames = (\n    location: string,\n    state: NavigationState | PartialState<NavigationState>\n  ) => {\n    state.routes.forEach((route: typeof state.routes[0]) => {\n      const currentLocation = location\n        ? `${location} > ${route.name}`\n        : route.name;\n\n      route.state?.routeNames?.forEach((routeName) => {\n        if (routeName === route.name) {\n          duplicates.push([\n            currentLocation,\n            `${currentLocation} > ${route.name}`,\n          ]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n\n  return duplicates;\n}\n"]},"metadata":{},"sourceType":"script"}