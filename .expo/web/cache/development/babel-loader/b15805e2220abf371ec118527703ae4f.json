{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TabActions = void 0;\nexports.default = TabRouter;\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nvar _BaseRouter = _interopRequireDefault(require(\"./BaseRouter\"));\n\nvar TYPE_ROUTE = 'route';\nvar TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\nexports.TabActions = TabActions;\n\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      break;\n  }\n\n  return history;\n};\n\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return Object.assign({}, state, {\n    index: index,\n    history: history\n  });\n};\n\nfunction TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      _ref$backBehavior = _ref.backBehavior,\n      backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;\n  var router = Object.assign({}, _BaseRouter.default, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: name + \"-\" + (0, _nonSecure.nanoid)(),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + (0, _nonSecure.nanoid)(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return Object.assign({}, route, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : name + \"-\" + (0, _nonSecure.nanoid)(),\n          params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      var history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      })) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + (0, _nonSecure.nanoid)(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n          routeParamList = _ref4.routeParamList,\n          routeKeyChanges = _ref4.routeKeyChanges;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name && !routeKeyChanges.includes(r.name);\n        }) || {\n          name: name,\n          key: name + \"-\" + (0, _nonSecure.nanoid)(),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return Object.assign({}, state, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList;\n\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(function (route) {\n                return route.key === action.payload.key;\n              });\n            } else {\n              index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name;\n              });\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex(Object.assign({}, state, {\n              routes: state.routes.map(function (route, i) {\n                if (i !== index) {\n                  return route;\n                }\n\n                var params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n                }\n\n                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? Object.assign({}, route, {\n                  path: path,\n                  params: params\n                }) : route;\n              })\n            }), index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            var previousKey = state.history[state.history.length - 2].key;\n\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n\n            if (_index === -1) {\n              return null;\n            }\n\n            return Object.assign({}, state, {\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n\n        default:\n          return _BaseRouter.default.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  });\n  return router;\n}","map":{"version":3,"mappings":"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","names":["TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","BaseRouter","getInitialState","_ref2","routeNames","routeParamList","undefined","includes","indexOf","map","nanoid","stale","getRehydratedState","partialState","_ref3","find","r","Math","min","max","_state$routes","length","_state$history","getStateForRouteNamesChange","_ref4","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","_ref5","merge","path","previousKey","slice","shouldActionChangeFocus","actionCreators"],"sources":["TabRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (\n          state as PartialState<TabNavigationState<ParamListBase>>\n        ).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find(\n            (r) => r.name === name && !routeKeyChanges.includes(r.name)\n          ) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params =\n                    action.payload.params !== undefined ||\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...route.params,\n                          ...action.payload.params,\n                        }\n                      : route.params;\n                } else {\n                  params =\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params;\n                }\n\n                const path =\n                  action.type === 'NAVIGATE' && action.payload.path != null\n                    ? action.payload.path\n                    : route.path;\n\n                return params !== route.params || path !== route.path\n                  ? { ...route, path, params }\n                  : route;\n              }),\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"script"}