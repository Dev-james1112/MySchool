{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoveredProps = void 0;\nexports.setRecoveryProps = setRecoveryProps;\n\nvar _ErroRecoveryStore = require(\"./ErroRecoveryStore\");\n\nvar _ExpoErrorRecovery = _interopRequireDefault(require(\"./ExpoErrorRecovery\"));\n\nrequire(\"./ErrorRecovery.fx\");\n\nvar recoveredProps = _getRecoveredProps();\n\nexports.recoveredProps = recoveredProps;\n\nfunction setRecoveryProps(props) {\n  (0, _ErroRecoveryStore.setRecoveryPropsToSave)(props);\n}\n\nfunction _getRecoveredProps() {\n  if (_ExpoErrorRecovery.default.recoveredProps) {\n    return JSON.parse(_ExpoErrorRecovery.default.recoveredProps);\n  }\n\n  return null;\n}","map":{"version":3,"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AAGO,IAAMA,cAAc,GAAGC,kBAAkB,EAAzC;;;;AAgBD,SAAUC,gBAAV,CAA2BC,KAA3B,EAAoD;EACxD,+CAAuBA,KAAvB;AACD;;AAED,SAASF,kBAAT,GAA2B;EACzB,IAAIG,2BAAkBJ,cAAtB,EAAsC;IACpC,OAAOK,IAAI,CAACC,KAAL,CAAWF,2BAAkBJ,cAA7B,CAAP;EACD;;EACD,OAAO,IAAP;AACD","names":["recoveredProps","_getRecoveredProps","setRecoveryProps","props","ExpoErrorRecovery","JSON","parse"],"sourceRoot":"","sources":["../src/ErrorRecovery.ts"],"sourcesContent":["import { setRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\nimport './ErrorRecovery.fx';\n\n// @docsMissing\nexport const recoveredProps = _getRecoveredProps();\n\n// @docsMissing\nexport type ErrorRecoveryProps = Record<string, any>;\n\n// @needsAudit\n/**\n * Set arbitrary error recovery props. If your project crashes in production as a result of a fatal\n * JS error, Expo will reload your project. If you've set these props, they'll be passed to your\n * reloaded project's initial props under `exp.errorRecovery`. Access to `localStorage` is required\n * on web, or else this will simply be a no-op.\n *\n * [Read more about error handling with Expo](/guides/errors).\n * @param props An object which will be passed to your reloaded project's initial props if the\n * project was reloaded as a result of a fatal JS error.\n */\nexport function setRecoveryProps(props: ErrorRecoveryProps): void {\n  setRecoveryPropsToSave(props);\n}\n\nfunction _getRecoveredProps(): ErrorRecoveryProps | null {\n  if (ExpoErrorRecovery.recoveredProps) {\n    return JSON.parse(ExpoErrorRecovery.recoveredProps);\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"script"}