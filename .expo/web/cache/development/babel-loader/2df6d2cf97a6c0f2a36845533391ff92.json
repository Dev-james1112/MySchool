{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useFocusEffect;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _useNavigation = _interopRequireDefault(require(\"./useNavigation\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useFocusEffect(effect) {\n  var navigation = (0, _useNavigation.default)();\n\n  if (arguments[1] !== undefined) {\n    var message = \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" + \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    // Your code here\\n' + '  }, [depA, depB])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n    console.error(message);\n  }\n\n  React.useEffect(function () {\n    var isFocused = false;\n    var cleanup;\n\n    var callback = function callback() {\n      var destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        var _message = 'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          _message += \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof destroy.then === 'function') {\n          _message += \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useFocusEffect(\\n' + '  React.useCallback() => {\\n' + '    async function fetchData() {\\n' + '      // You can await here\\n' + '      const response = await MyAPI.getData(someId);\\n' + '      // ...\\n' + '    }\\n\\n' + '    fetchData();\\n' + '  }, [someId])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          _message += \" You returned '\" + JSON.stringify(destroy) + \"'.\";\n        }\n\n        console.error(_message);\n      }\n    };\n\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n    return function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;;;;;AAWe,SAASA,cAAT,CAAwBC,MAAxB,EAAgD;EAC7D,IAAMC,UAAU,GAAGC,6BAAnB;;EAEA,IAAIC,SAAS,CAAC,CAAD,CAATA,KAAiBC,SAArB,EAAgC;IAC9B,IAAMC,OAAO,GACX,yFACA,8EADA,GAEA,mBAFA,GAGA,+BAHA,GAIA,yBAJA,GAKA,sBALA,GAMA,QANA,GAOA,oEARF;IAUAC,OAAO,CAACC,KAARD,CAAcD,OAAdC;EACD;;EAEDE,KAAK,CAACC,SAAND,CAAgB,YAAM;IACpB,IAAIE,SAAS,GAAG,KAAhB;IACA,IAAIC,OAAJ;;IAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;MACrB,IAAMC,OAAO,GAAGb,MAAM,EAAtB;;MAEA,IAAIa,OAAO,KAAKT,SAAZS,IAAyB,OAAOA,OAAP,KAAmB,UAAhD,EAA4D;QAC1D,OAAOA,OAAP;MACD;;MAED,IAAIC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;QACzC,IAAIT,QAAO,GACT,6FADF;;QAGA,IAAIQ,OAAO,KAAK,IAAhB,EAAsB;UACpBR,QAAO,IACL,kGADFA;QADF,OAGO,IAAI,OAAQQ,OAAD,CAAiBI,IAAxB,KAAiC,UAArC,EAAiD;UACtDZ,QAAO,IACL,0FACA,uDADA,GAEA,8BAFA,GAGA,mBAHA,GAIA,8BAJA,GAKA,oCALA,GAMA,+BANA,GAOA,uDAPA,GAQA,gBARA,GASA,WATA,GAUA,oBAVA,GAWA,kBAXA,GAYA,QAZA,GAaA,oEAdFA;QADK,OAgBA;UACLA,QAAO,wBAAsBa,IAAI,CAACC,SAALD,CAAeL,OAAfK,CAAtB,OAAPb;QACD;;QAEDC,OAAO,CAACC,KAARD,CAAcD,QAAdC;MACD;IAnCH;;IAuCA,IAAIL,UAAU,CAACS,SAAXT,EAAJ,EAA4B;MAC1BU,OAAO,GAAGC,QAAQ,EAAlBD;MACAD,SAAS,GAAG,IAAZA;IACD;;IAED,IAAMU,gBAAgB,GAAGnB,UAAU,CAACoB,WAAXpB,CAAuB,OAAvBA,EAAgC,YAAM;MAG7D,IAAIS,SAAJ,EAAe;QACb;MACD;;MAED,IAAIC,OAAO,KAAKP,SAAhB,EAA2B;QACzBO,OAAO;MACR;;MAEDA,OAAO,GAAGC,QAAQ,EAAlBD;MACAD,SAAS,GAAG,IAAZA;IAZuB,EAAzB;IAeA,IAAMY,eAAe,GAAGrB,UAAU,CAACoB,WAAXpB,CAAuB,MAAvBA,EAA+B,YAAM;MAC3D,IAAIU,OAAO,KAAKP,SAAhB,EAA2B;QACzBO,OAAO;MACR;;MAEDA,OAAO,GAAGP,SAAVO;MACAD,SAAS,GAAG,KAAZA;IANsB,EAAxB;IASA,OAAO,YAAM;MACX,IAAIC,OAAO,KAAKP,SAAhB,EAA2B;QACzBO,OAAO;MACR;;MAEDS,gBAAgB;MAChBE,eAAe;IANjB;EAxEF,GAgFG,CAACtB,MAAD,EAASC,UAAT,CAhFHO;AAiFD","names":["useFocusEffect","effect","navigation","useNavigation","arguments","undefined","message","console","error","React","useEffect","isFocused","cleanup","callback","destroy","process","env","NODE_ENV","then","JSON","stringify","unsubscribeFocus","addListener","unsubscribeBlur"],"sources":["useFocusEffect.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  if (arguments[1] !== undefined) {\n    const message =\n      \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" +\n      \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" +\n      'useFocusEffect(\\n' +\n      '  React.useCallback(() => {\\n' +\n      '    // Your code here\\n' +\n      '  }, [depA, depB])\\n' +\n      ');\\n\\n' +\n      'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n\n    console.error(message);\n  }\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            ');\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned '${JSON.stringify(destroy)}'.`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n"]},"metadata":{},"sourceType":"script"}