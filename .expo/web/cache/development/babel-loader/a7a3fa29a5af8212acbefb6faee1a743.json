{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bezier = void 0;\n\nvar Bezier = function () {\n  var _f = function _f(mX1, mY1, mX2, mY2) {\n    var NEWTON_ITERATIONS = 4;\n    var NEWTON_MIN_SLOPE = 0.001;\n    var SUBDIVISION_PRECISION = 0.0000001;\n    var SUBDIVISION_MAX_ITERATIONS = 10;\n    var kSplineTableSize = 11;\n    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n    var A = function () {\n      var _f = function _f(aA1, aA2) {\n        return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n      };\n\n      _f._closure = {};\n      _f.asString = \"function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\";\n      _f.__workletHash = 7696928702327;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (15:4)\";\n      return _f;\n    }();\n\n    var B = function () {\n      var _f = function _f(aA1, aA2) {\n        return 3.0 * aA2 - 6.0 * aA1;\n      };\n\n      _f._closure = {};\n      _f.asString = \"function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}\";\n      _f.__workletHash = 3169786778773;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (19:4)\";\n      return _f;\n    }();\n\n    var C = function () {\n      var _f = function _f(aA1) {\n        return 3.0 * aA1;\n      };\n\n      _f._closure = {};\n      _f.asString = \"function C(aA1){return 3.0*aA1;}\";\n      _f.__workletHash = 6399610653367;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (23:4)\";\n      return _f;\n    }();\n\n    var calcBezier = function () {\n      var _f = function _f(aT, aA1, aA2) {\n        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n      };\n\n      _f._closure = {\n        A: A,\n        B: B,\n        C: C\n      };\n      _f.asString = \"function calcBezier(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}}\";\n      _f.__workletHash = 3153137150968;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (28:4)\";\n      return _f;\n    }();\n\n    var getSlope = function () {\n      var _f = function _f(aT, aA1, aA2) {\n        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n      };\n\n      _f._closure = {\n        A: A,\n        B: B,\n        C: C\n      };\n      _f.asString = \"function getSlope(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}}\";\n      _f.__workletHash = 17050227570308;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (33:4)\";\n      return _f;\n    }();\n\n    var binarySubdivide = function () {\n      var _f = function _f(aX, aA, aB, mX1, mX2) {\n        var currentX;\n        var currentT;\n        var i = 0;\n\n        do {\n          currentT = aA + (aB - aA) / 2.0;\n          currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n          if (currentX > 0.0) {\n            aB = currentT;\n          } else {\n            aA = currentT;\n          }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n        return currentT;\n      };\n\n      _f._closure = {\n        SUBDIVISION_PRECISION: SUBDIVISION_PRECISION,\n        SUBDIVISION_MAX_ITERATIONS: SUBDIVISION_MAX_ITERATIONS,\n        calcBezier: calcBezier\n      };\n      _f.asString = \"function binarySubdivide(aX,aA,aB,mX1,mX2){const{SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS,calcBezier}=jsThis._closure;{let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}}\";\n      _f.__workletHash = 7302972877011;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (37:4)\";\n      return _f;\n    }();\n\n    var newtonRaphsonIterate = function () {\n      var _f = function _f(aX, aGuessT, mX1, mX2) {\n        for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n          var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n          if (currentSlope === 0.0) {\n            return aGuessT;\n          }\n\n          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n          aGuessT -= currentX / currentSlope;\n        }\n\n        return aGuessT;\n      };\n\n      _f._closure = {\n        NEWTON_ITERATIONS: NEWTON_ITERATIONS,\n        getSlope: getSlope,\n        calcBezier: calcBezier\n      };\n      _f.asString = \"function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=jsThis._closure;{for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}}\";\n      _f.__workletHash = 10378506933532;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (55:4)\";\n      return _f;\n    }();\n\n    var LinearEasing = function () {\n      var _f = function _f(x) {\n        return x;\n      };\n\n      _f._closure = {};\n      _f.asString = \"function LinearEasing(x){return x;}\";\n      _f.__workletHash = 3962143445177;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (67:4)\";\n      return _f;\n    }();\n\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    if (mX1 === mY1 && mX2 === mY2) {\n      return LinearEasing;\n    }\n\n    var sampleValues = new Array(kSplineTableSize);\n\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n\n    var getTForX = function () {\n      var _f = function _f(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = kSplineTableSize - 1;\n\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n          intervalStart += kSampleStepSize;\n        }\n\n        --currentSample;\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        var guessForT = intervalStart + dist * kSampleStepSize;\n        var initialSlope = getSlope(guessForT, mX1, mX2);\n\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n          return guessForT;\n        } else {\n          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n      };\n\n      _f._closure = {\n        kSplineTableSize: kSplineTableSize,\n        sampleValues: sampleValues,\n        kSampleStepSize: kSampleStepSize,\n        getSlope: getSlope,\n        mX1: mX1,\n        mX2: mX2,\n        NEWTON_MIN_SLOPE: NEWTON_MIN_SLOPE,\n        newtonRaphsonIterate: newtonRaphsonIterate,\n        binarySubdivide: binarySubdivide\n      };\n      _f.asString = \"function getTForX(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=jsThis._closure;{let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}}\";\n      _f.__workletHash = 3164695138880;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (88:4)\";\n      return _f;\n    }();\n\n    return function () {\n      var _f = function _f(x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n          return x;\n        }\n\n        if (x === 0) {\n          return 0;\n        }\n\n        if (x === 1) {\n          return 1;\n        }\n\n        return calcBezier(getTForX(x), mY1, mY2);\n      };\n\n      _f._closure = {\n        mX1: mX1,\n        mY1: mY1,\n        mX2: mX2,\n        mY2: mY2,\n        calcBezier: calcBezier,\n        getTForX: getTForX\n      };\n      _f.asString = \"function BezierEasing(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=jsThis._closure;{if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}}\";\n      _f.__workletHash = 8676971518933;\n      _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (112:11)\";\n      return _f;\n    }();\n  };\n\n  _f._closure = {};\n  _f.asString = \"function Bezier(mX1,mY1,mX2,mY2){const NEWTON_ITERATIONS=4;const NEWTON_MIN_SLOPE=0.001;const SUBDIVISION_PRECISION=0.0000001;const SUBDIVISION_MAX_ITERATIONS=10;const kSplineTableSize=11;const kSampleStepSize=1.0/(kSplineTableSize-1.0);function A(aA1,aA2){'worklet';return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){'worklet';return 3.0*aA2-6.0*aA1;}function C(aA1){'worklet';return 3.0*aA1;}function calcBezier(aT,aA1,aA2){'worklet';return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){'worklet';return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){'worklet';let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){'worklet';for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}\";\n  _f.__workletHash = 7389715548968;\n  _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\reanimated2\\\\Bezier.js (7:7)\";\n  return _f;\n}();\n\nexports.Bezier = Bezier;","map":{"version":3,"names":["Bezier","mX1","mY1","mX2","mY2","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","LinearEasing","x","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope"],"sources":["C:/.project/today_meal/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nexport function Bezier(mX1, mY1, mX2, mY2) {\n    'worklet';\n    const NEWTON_ITERATIONS = 4;\n    const NEWTON_MIN_SLOPE = 0.001;\n    const SUBDIVISION_PRECISION = 0.0000001;\n    const SUBDIVISION_MAX_ITERATIONS = 10;\n    const kSplineTableSize = 11;\n    const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n    function A(aA1, aA2) {\n        'worklet';\n        return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n    }\n    function B(aA1, aA2) {\n        'worklet';\n        return 3.0 * aA2 - 6.0 * aA1;\n    }\n    function C(aA1) {\n        'worklet';\n        return 3.0 * aA1;\n    }\n    // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n    function calcBezier(aT, aA1, aA2) {\n        'worklet';\n        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n    }\n    // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n    function getSlope(aT, aA1, aA2) {\n        'worklet';\n        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n    }\n    function binarySubdivide(aX, aA, aB, mX1, mX2) {\n        'worklet';\n        let currentX;\n        let currentT;\n        let i = 0;\n        do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n            if (currentX > 0.0) {\n                aB = currentT;\n            }\n            else {\n                aA = currentT;\n            }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION &&\n            ++i < SUBDIVISION_MAX_ITERATIONS);\n        return currentT;\n    }\n    function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n        'worklet';\n        for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n            const currentSlope = getSlope(aGuessT, mX1, mX2);\n            if (currentSlope === 0.0) {\n                return aGuessT;\n            }\n            const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n        }\n        return aGuessT;\n    }\n    function LinearEasing(x) {\n        'worklet';\n        return x;\n    }\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n    }\n    if (mX1 === mY1 && mX2 === mY2) {\n        return LinearEasing;\n    }\n    // FIXME: Float32Array is not available in Hermes right now\n    //\n    // var float32ArraySupported = typeof Float32Array === 'function';\n    // const sampleValues = float32ArraySupported\n    // ? new Float32Array(kSplineTableSize)\n    // : new Array(kSplineTableSize);\n    // Precompute samples table\n    const sampleValues = new Array(kSplineTableSize);\n    for (let i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    function getTForX(aX) {\n        'worklet';\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        // Interpolate to provide an initial guess for t\n        const dist = (aX - sampleValues[currentSample]) /\n            (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        }\n        else if (initialSlope === 0.0) {\n            return guessForT;\n        }\n        else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n    return function BezierEasing(x) {\n        'worklet';\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n        }\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}