{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _elements = require(\"@react-navigation/elements\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ModalPresentationContext = _interopRequireDefault(require(\"../../utils/ModalPresentationContext\"));\n\nvar _useKeyboardManager2 = _interopRequireDefault(require(\"../../utils/useKeyboardManager\"));\n\nvar _Card = _interopRequireDefault(require(\"./Card\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var interpolationIndex = _ref.interpolationIndex,\n      index = _ref.index,\n      active = _ref.active,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      modal = _ref.modal,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      headerDarkContent = _ref.headerDarkContent,\n      hasAbsoluteFloatHeader = _ref.hasAbsoluteFloatHeader,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      isParentHeaderShown = _ref.isParentHeaderShown,\n      isNextScreenTransparent = _ref.isNextScreenTransparent,\n      detachCurrentScreen = _ref.detachCurrentScreen,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onGestureCancel = _ref.onGestureCancel,\n      onGestureEnd = _ref.onGestureEnd,\n      onGestureStart = _ref.onGestureStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene;\n  var parentHeaderHeight = React.useContext(_elements.HeaderHeightContext);\n\n  var _useKeyboardManager = (0, _useKeyboardManager2.default)(React.useCallback(function () {\n    var _scene$descriptor = scene.descriptor,\n        options = _scene$descriptor.options,\n        navigation = _scene$descriptor.navigation;\n    return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n  }, [scene.descriptor])),\n      onPageChangeStart = _useKeyboardManager.onPageChangeStart,\n      onPageChangeCancel = _useKeyboardManager.onPageChangeCancel,\n      onPageChangeConfirm = _useKeyboardManager.onPageChangeConfirm;\n\n  var handleOpen = function handleOpen() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.descriptor.route;\n    onPageChangeStart();\n    onGestureStart({\n      route: route\n    });\n  };\n\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.descriptor.route;\n    onPageChangeCancel();\n    onGestureCancel({\n      route: route\n    });\n  };\n\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.descriptor.route;\n    onGestureEnd({\n      route: route\n    });\n  };\n\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n        gesture = _ref2.gesture;\n    var route = scene.descriptor.route;\n\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var _scene$descriptor$opt = scene.descriptor.options,\n      presentation = _scene$descriptor$opt.presentation,\n      animationEnabled = _scene$descriptor$opt.animationEnabled,\n      cardOverlay = _scene$descriptor$opt.cardOverlay,\n      cardOverlayEnabled = _scene$descriptor$opt.cardOverlayEnabled,\n      cardShadowEnabled = _scene$descriptor$opt.cardShadowEnabled,\n      cardStyle = _scene$descriptor$opt.cardStyle,\n      cardStyleInterpolator = _scene$descriptor$opt.cardStyleInterpolator,\n      gestureDirection = _scene$descriptor$opt.gestureDirection,\n      gestureEnabled = _scene$descriptor$opt.gestureEnabled,\n      gestureResponseDistance = _scene$descriptor$opt.gestureResponseDistance,\n      gestureVelocityImpact = _scene$descriptor$opt.gestureVelocityImpact,\n      headerMode = _scene$descriptor$opt.headerMode,\n      headerShown = _scene$descriptor$opt.headerShown,\n      transitionSpec = _scene$descriptor$opt.transitionSpec;\n  var previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  var backTitle;\n\n  if (previousScene) {\n    var _previousScene$descri = previousScene.descriptor,\n        options = _previousScene$descri.options,\n        route = _previousScene$descri.route;\n    backTitle = (0, _elements.getHeaderTitle)(options, route.name);\n  }\n\n  var headerBack = React.useMemo(function () {\n    return backTitle !== undefined ? {\n      title: backTitle\n    } : undefined;\n  }, [backTitle]);\n  return React.createElement(_Card.default, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    headerDarkContent: headerDarkContent,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden',\n      display: animationEnabled === false && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, _reactNative.StyleSheet.absoluteFill]\n  }, React.createElement(_reactNative.View, {\n    style: styles.container\n  }, React.createElement(_ModalPresentationContext.default.Provider, {\n    value: modal\n  }, React.createElement(_reactNative.View, {\n    style: styles.scene\n  }, React.createElement(_elements.HeaderBackContext.Provider, {\n    value: headerBack\n  }, React.createElement(_elements.HeaderShownContext.Provider, {\n    value: isParentHeaderShown || headerShown !== false\n  }, React.createElement(_elements.HeaderHeightContext.Provider, {\n    value: headerShown ? headerHeight : parentHeaderHeight !== null && parentHeaderHeight !== void 0 ? parentHeaderHeight : 0\n  }, renderScene({\n    route: scene.descriptor.route\n  }))))), headerMode !== 'float' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null)));\n}\n\nvar _default = React.memo(CardContainer);\n\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["EPSILON","CardContainer","interpolationIndex","index","active","closing","gesture","focused","modal","getPreviousScene","getFocusedRoute","headerDarkContent","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","isNextScreenTransparent","detachCurrentScreen","layout","onCloseRoute","onOpenRoute","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","parentHeaderHeight","React","useContext","HeaderHeightContext","useKeyboardManager","useCallback","descriptor","options","navigation","isFocused","keyboardHandlingEnabled","onPageChangeStart","onPageChangeCancel","onPageChangeConfirm","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","useTheme","colors","useState","pointerEvents","setPointerEvents","useEffect","listener","progress","next","_scene$progress$next","addListener","_scene$progress$next$","value","removeListener","presentation","animationEnabled","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","headerMode","headerShown","transitionSpec","previousScene","backTitle","getHeaderTitle","name","headerBack","useMemo","undefined","title","Card","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","overflow","display","StyleSheet","absoluteFill","View","styles","container","ModalPresentationContext","Provider","HeaderBackContext","HeaderShownContext","mode","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["CardContainer.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene;\n  headerDarkContent: boolean | undefined;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  interpolationIndex,\n  index,\n  active,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  headerDarkContent,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  const headerBack = React.useMemo(\n    () => (backTitle !== undefined ? { title: backTitle } : undefined),\n    [backTitle]\n  );\n\n  return (\n    <Card\n      interpolationIndex={interpolationIndex}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={index === 0 ? false : gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n      headerDarkContent={headerDarkContent}\n      containerStyle={\n        hasAbsoluteFloatHeader && headerMode !== 'screen'\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[\n        {\n          backgroundColor:\n            presentation === 'transparentModal'\n              ? 'transparent'\n              : colors.background,\n        },\n        cardStyle,\n      ]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n          display:\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            animationEnabled === false &&\n            isNextScreenTransparent === false &&\n            detachCurrentScreen !== false &&\n            !focused\n              ? 'none'\n              : 'flex',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <ModalPresentationContext.Provider value={modal}>\n          <View style={styles.scene}>\n            <HeaderBackContext.Provider value={headerBack}>\n              <HeaderShownContext.Provider\n                value={isParentHeaderShown || headerShown !== false}\n              >\n                <HeaderHeightContext.Provider\n                  value={headerShown ? headerHeight : parentHeaderHeight ?? 0}\n                >\n                  {renderScene({ route: scene.descriptor.route })}\n                </HeaderHeightContext.Provider>\n              </HeaderShownContext.Provider>\n            </HeaderBackContext.Provider>\n          </View>\n          {headerMode !== 'float'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                scenes: [previousScene, scene],\n                getPreviousScene,\n                getFocusedRoute,\n                onContentHeightChange: onHeaderHeightChange,\n              })\n            : null}\n        </ModalPresentationContext.Provider>\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}