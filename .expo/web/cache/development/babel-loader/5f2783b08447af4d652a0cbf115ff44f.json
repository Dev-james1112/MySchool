{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _State = require(\"../../State\");\n\nvar _utils = require(\"../../utils\");\n\nvar warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');\nvar REANIMATED_AVAILABLE = (_reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.useSharedValue) !== undefined;\nvar setGestureState = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.setGestureState;\nvar GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, _State.State.BEGAN);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: _State.State.BEGAN\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 463937378312;\n          _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (14:13)\";\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, _State.State.ACTIVE);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: _State.State.ACTIVE\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 5304131972715;\n          _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (23:16)\";\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, _State.State.FAILED);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: _State.State.FAILED\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 180936263236;\n          _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (32:12)\";\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, _State.State.END);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              END: _State.State.END\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 14407529741256;\n          _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (41:11)\";\n          return _f;\n        }()\n      };\n    };\n\n    _f._closure = {\n      REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n      setGestureState: setGestureState,\n      State: {\n        BEGAN: _State.State.BEGAN,\n        ACTIVE: _State.State.ACTIVE,\n        FAILED: _State.State.FAILED,\n        END: _State.State.END\n      },\n      warningMessage: warningMessage\n    };\n    _f.asString = \"function create(handlerTag){const{REANIMATED_AVAILABLE,setGestureState,State,warningMessage}=jsThis._closure;{return{begin:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}},activate:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}},fail:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}},end:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}};}}\";\n    _f.__workletHash = 3925022521265;\n    _f.__location = \"C:\\\\.project\\\\today_meal\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js\";\n    return _f;\n  }()\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"mappings":";;;;;AAAA;;AACA;;AACA;;AASA,IAAMA,cAAc,GAAGC,uBACrB,kFADqBA,CAAvB;AAMA,IAAMC,oBAAoB,GAAG,mCAAU,IAAVC,sCAAU,MAAVA,0CAAYC,cAAZ,MAA+BC,SAA5D;AACA,IAAMC,eAAe,GAAGH,kCAAH,IAAGA,sCAAH,MAAGA,GAAH,MAAGA,iCAAYG,eAApC;AAEO,IAAMC,mBAAmB,GAAG;EACjCC,MADiC;IAAA,qBAC1BC,UAD0B,EACmB;MAElD,OAAO;QACLC,KAAK;UAAA,uBAAQ;YAEX,IAAIR,oBAAJ,EAA0B;cACxBI,eAAe,CAACG,UAAD,EAAaE,aAAMC,KAAnB,CAAfN;YADF,OAEO;cACLO,OAAO,CAACC,IAARD,CAAab,cAAba;YACD;UAPE,CACA;;UAAA;YAAA,sBAtBXX,oBAsBW;YAAA,iBAbXI,eAaW;YAAA,YAbSG,UAaT;YAAA;cAAA,OAbYR,aACrBW;YAYS;YAAA;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA,GADA;QAULG,QAAQ;UAAA,uBAAQ;YAEd,IAAIb,oBAAJ,EAA0B;cACxBI,eAAe,CAACG,UAAD,EAAaE,aAAMK,MAAnB,CAAfV;YADF,OAEO;cACLO,OAAO,CAACC,IAARD,CAAab,cAAba;YACD;UAhBE,CAUG;;UAAA;YAAA,sBA/BdX,oBA+Bc;YAAA,iBAtBdI,eAsBc;YAAA,YAtBMG,UAsBN;YAAA;cAAA,QAtBSR,aACrBe;YAqBY;YAAA;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA,GAVH;QAmBLC,IAAI;UAAA,uBAAQ;YAEV,IAAIf,oBAAJ,EAA0B;cACxBI,eAAe,CAACG,UAAD,EAAaE,aAAMO,MAAnB,CAAfZ;YADF,OAEO;cACLO,OAAO,CAACC,IAARD,CAAab,cAAba;YACD;UAzBE,CAmBD;;UAAA;YAAA,sBAxCVX,oBAwCU;YAAA,iBA/BVI,eA+BU;YAAA,YA/BUG,UA+BV;YAAA;cAAA,QA/BaR,aACrBiB;YA8BQ;YAAA;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA,GAnBC;QA4BLC,GAAG;UAAA,uBAAQ;YAET,IAAIjB,oBAAJ,EAA0B;cACxBI,eAAe,CAACG,UAAD,EAAaE,aAAMS,GAAnB,CAAfd;YADF,OAEO;cACLO,OAAO,CAACC,IAARD,CAAab,cAAba;YACD;UACF,CAPE;;UAAA;YAAA,sBAjDTX,oBAiDS;YAAA,iBAxCTI,eAwCS;YAAA,YAxCWG,UAwCX;YAAA;cAAA,KAxCcR,aACrBmB;YAuCO;YAAA;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA;MA5BE,CAAP;IAqCD,CAxCgC;;IAAA;MAAA;MAAA,iBAwB3Bd,eAxB2B;MAAA;QAAA,OAFdK,kBAEc;QAAA,QAMDA,mBANC;QAAA,QAeDA,mBAfC;QAAA,KAwBDA;MAxBC;MAAA,gBA0BpBX;IA1BoB;IAAA;IAAA;IAAA;IAAA;EAAA;AAAA,CAA5B","names":["warningMessage","tagMessage","REANIMATED_AVAILABLE","Reanimated","useSharedValue","undefined","setGestureState","GestureStateManager","create","handlerTag","begin","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}