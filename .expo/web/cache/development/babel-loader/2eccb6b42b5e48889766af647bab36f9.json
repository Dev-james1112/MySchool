{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar MapperRegistry = function () {\n  function MapperRegistry(module) {\n    (0, _classCallCheck2.default)(this, MapperRegistry);\n    this.sortedMappers = [];\n    this.mappers = new Map();\n    this.updatedSinceLastExecute = false;\n    this._module = module;\n  }\n\n  (0, _createClass2.default)(MapperRegistry, [{\n    key: \"startMapper\",\n    value: function startMapper(mapper) {\n      this.mappers.set(mapper.id, mapper);\n      this.updatedSinceLastExecute = true;\n      return mapper.id;\n    }\n  }, {\n    key: \"stopMapper\",\n    value: function stopMapper(id) {\n      this.mappers.delete(id);\n      this.updatedSinceLastExecute = true;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      if (this.updatedSinceLastExecute) {\n        this.updateOrder();\n        this.updatedSinceLastExecute = false;\n      }\n\n      for (var i = 0, len = this.sortedMappers.length; i < len; ++i) {\n        var mapper = this.sortedMappers[i];\n\n        if (mapper.dirty) {\n          mapper.execute();\n        }\n      }\n    }\n  }, {\n    key: \"updateOrder\",\n    value: function updateOrder() {\n      var nodes = (0, _toConsumableArray2.default)(this.mappers.values()).map(function (mapper) {\n        return new Node(mapper);\n      });\n      var mappersById = {};\n      this.mappers.forEach(function (mapper) {\n        mappersById[mapper.id] = mapper;\n      });\n\n      for (var i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n        var node = nodes[i];\n\n        if (node.mapper.outputs.length === 0) {\n          continue;\n        }\n\n        for (var j = 0; j < nodesLen; ++j) {\n          var restNode = nodes[j];\n\n          if (i === j || restNode.mapper.inputs.length === 0) {\n            continue;\n          }\n\n          for (var outi = 0, outputsLen = node.mapper.outputs.length; outi < outputsLen; ++outi) {\n            for (var resti = 0, restLen = restNode.mapper.inputs.length; resti < restLen; ++resti) {\n              if (node.mapper.outputs[outi]._id === restNode.mapper.inputs[resti]._id) {\n                node.children.push(restNode);\n              }\n            }\n          }\n        }\n      }\n\n      var post = {};\n      var postCounter = 1;\n\n      var dfs = function dfs(node) {\n        var index = nodes.indexOf(node);\n\n        if (index === -1) {\n          return;\n        }\n\n        ++postCounter;\n        nodes.splice(index, 1);\n\n        if (node.children.length === 0 && nodes.length > 0) {\n          post[node.mapper.id] = postCounter++;\n          dfs(nodes[0]);\n          return;\n        }\n\n        for (var _i = 0, len = node.children.length; _i < len; ++_i) {\n          dfs(node.children[_i]);\n        }\n\n        post[node.mapper.id] = postCounter++;\n      };\n\n      while (nodes.length) {\n        dfs(nodes[0]);\n      }\n\n      var postArray = Object.keys(post).map(function (key) {\n        var num = parseInt(key);\n        return [num, post[num]];\n      });\n      postArray.sort(function (a, b) {\n        return b[1] - a[1];\n      });\n      this.sortedMappers = [];\n\n      for (var _i2 = 0, len = postArray.length; _i2 < len; ++_i2) {\n        var _postArray$_i = (0, _slicedToArray2.default)(postArray[_i2], 1),\n            id = _postArray$_i[0];\n\n        this.sortedMappers.push(mappersById[id]);\n      }\n    }\n  }, {\n    key: \"needRunOnRender\",\n    get: function get() {\n      return this.updatedSinceLastExecute;\n    }\n  }]);\n  return MapperRegistry;\n}();\n\nexports.default = MapperRegistry;\nvar Node = (0, _createClass2.default)(function Node(mapper) {\n  var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  (0, _classCallCheck2.default)(this, Node);\n  this.mapper = mapper;\n  this.children = children;\n});","map":{"version":3,"names":["MapperRegistry","module","sortedMappers","mappers","Map","updatedSinceLastExecute","_module","mapper","set","id","delete","updateOrder","i","len","length","dirty","execute","nodes","values","map","Node","mappersById","forEach","nodesLen","node","outputs","j","restNode","inputs","outi","outputsLen","resti","restLen","_id","children","push","post","postCounter","dfs","index","indexOf","splice","postArray","Object","keys","key","num","parseInt","sort","a","b"],"sources":["C:/.project/today_meal/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/MapperRegistry.js"],"sourcesContent":["export default class MapperRegistry {\n    constructor(module) {\n        this.sortedMappers = [];\n        this.mappers = new Map();\n        this.updatedSinceLastExecute = false;\n        this._module = module;\n    }\n    startMapper(mapper) {\n        this.mappers.set(mapper.id, mapper);\n        this.updatedSinceLastExecute = true;\n        return mapper.id;\n    }\n    stopMapper(id) {\n        this.mappers.delete(id);\n        this.updatedSinceLastExecute = true;\n    }\n    execute() {\n        if (this.updatedSinceLastExecute) {\n            this.updateOrder();\n            this.updatedSinceLastExecute = false;\n        }\n        for (let i = 0, len = this.sortedMappers.length; i < len; ++i) {\n            const mapper = this.sortedMappers[i];\n            if (mapper.dirty) {\n                mapper.execute();\n            }\n        }\n    }\n    updateOrder() {\n        const nodes = [...this.mappers.values()].map((mapper) => new Node(mapper));\n        const mappersById = {};\n        this.mappers.forEach((mapper) => {\n            mappersById[mapper.id] = mapper;\n        });\n        // create a graph from array of nodes\n        for (let i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n            const node = nodes[i];\n            if (node.mapper.outputs.length === 0) {\n                continue;\n            }\n            for (let j = 0; j < nodesLen; ++j) {\n                const restNode = nodes[j];\n                if (i === j || restNode.mapper.inputs.length === 0) {\n                    continue;\n                }\n                for (let outi = 0, outputsLen = node.mapper.outputs.length; outi < outputsLen; ++outi) {\n                    for (let resti = 0, restLen = restNode.mapper.inputs.length; resti < restLen; ++resti) {\n                        if (node.mapper.outputs[outi]._id ===\n                            restNode.mapper.inputs[resti]._id) {\n                            node.children.push(restNode);\n                        }\n                    }\n                }\n            }\n        }\n        const post = {};\n        let postCounter = 1;\n        const dfs = (node) => {\n            const index = nodes.indexOf(node);\n            if (index === -1) {\n                // this node has already been handled\n                return;\n            }\n            ++postCounter;\n            nodes.splice(index, 1);\n            if (node.children.length === 0 && nodes.length > 0) {\n                post[node.mapper.id] = postCounter++;\n                dfs(nodes[0]);\n                return;\n            }\n            for (let i = 0, len = node.children.length; i < len; ++i) {\n                dfs(node.children[i]);\n            }\n            post[node.mapper.id] = postCounter++;\n        };\n        while (nodes.length)\n            dfs(nodes[0]);\n        const postArray = Object.keys(post).map((key) => {\n            const num = parseInt(key);\n            return [num, post[num]];\n        });\n        postArray.sort((a, b) => {\n            return b[1] - a[1];\n        });\n        // clear sorted mappers\n        this.sortedMappers = [];\n        for (let i = 0, len = postArray.length; i < len; ++i) {\n            const [id] = postArray[i];\n            this.sortedMappers.push(mappersById[id]);\n        }\n    }\n    get needRunOnRender() {\n        return this.updatedSinceLastExecute;\n    }\n}\nclass Node {\n    constructor(mapper, children = []) {\n        this.mapper = mapper;\n        this.children = children;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}