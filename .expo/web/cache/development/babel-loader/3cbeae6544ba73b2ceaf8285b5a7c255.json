{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useFocusedListenersChildrenAdapter;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useFocusedListenersChildrenAdapter(_ref) {\n  var navigation = _ref.navigation,\n      focusedListeners = _ref.focusedListeners;\n\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n      addListener = _React$useContext.addListener;\n\n  var listener = React.useCallback(function (callback) {\n    if (navigation.isFocused()) {\n      for (var _listener of focusedListeners) {\n        var _listener2 = _listener(callback),\n            handled = _listener2.handled,\n            result = _listener2.result;\n\n        if (handled) {\n          return {\n            handled: handled,\n            result: result\n          };\n        }\n      }\n\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(function () {\n    return addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener);\n  }, [addListener, listener]);\n}","map":{"version":3,"mappings":";;;;;;;AACA;;AAEA;;;;;;AAce,SAASA,kCAAT,OAGH;EAAA,IAFVC,UAEU,QAFVA,UAEU;EAAA,IADVC,gBACU,QADVA,gBACU;;EACV,wBAAwBC,KAAK,CAACC,UAAND,CAAiBE,iCAAjBF,CAAxB;EAAA,IAAQG,WAAR,qBAAQA,WAAR;;EAEA,IAAMC,QAAQ,GAAGJ,KAAK,CAACK,WAANL,CACdM,kBAAD,EAA8C;IAC5C,IAAIR,UAAU,CAACS,SAAXT,EAAJ,EAA4B;MAC1B,KAAK,IAAMM,SAAX,IAAuBL,gBAAvB,EAAyC;QACvC,iBAA4BK,SAAQ,CAACE,QAAD,CAApC;QAAA,IAAQE,OAAR,cAAQA,OAAR;QAAA,IAAiBC,MAAjB,cAAiBA,MAAjB;;QAEA,IAAID,OAAJ,EAAa;UACX,OAAO;YAAEA,OAAF,EAAEA,OAAF;YAAWC;UAAX,CAAP;QACD;MACF;;MAED,OAAO;QAAED,OAAO,EAAE,IAAX;QAAiBC,MAAM,EAAEH,QAAQ,CAACR,UAAD;MAAjC,CAAP;IATF,OAUO;MACL,OAAO;QAAEU,OAAO,EAAE,KAAX;QAAkBC,MAAM,EAAE;MAA1B,CAAP;IACD;EAdY,GAgBf,CAACV,gBAAD,EAAmBD,UAAnB,CAhBeE,CAAjB;EAmBAA,KAAK,CAACU,SAANV,CACE;IAAA,OAAMG,WAAN,SAAMA,eAAN,WAAMA,GAAN,MAAMA,cAAW,CAAG,OAAH,EAAYC,QAAZ,CAAjB;EAAA,CADFJ,EAEE,CAACG,WAAD,EAAcC,QAAd,CAFFJ;AAID","names":["useFocusedListenersChildrenAdapter","navigation","focusedListeners","React","useContext","NavigationBuilderContext","addListener","listener","useCallback","callback","isFocused","handled","result","useEffect"],"sources":["useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n"]},"metadata":{},"sourceType":"script"}